[{"path":"https://gilesjohnr.github.io/es/articles/calc_hydro_variables.html","id":"download-spatial-data","dir":"Articles","previous_headings":"","what":"Download spatial data","title":"Calculating hydrological variables","text":"Digital Elevation Model (DEM) downloaded ‘tmp’ directory.","code":"library(es) library(sp) library(sf) library(raster) library(ggplot2) library(ggrepel) # Get data frame of simulated environmental sampling data df <- es::template_es_data head(df)  date location_id  lat   lon target_name ct_value 1 2020-03-07           1 23.8 90.37    target_0       NA 2 2020-03-07           1 23.8 90.37    target_0       NA 3 2020-03-07           1 23.8 90.37    target_0       NA 4 2020-03-07           1 23.8 90.37    target_0 29.95670 5 2020-03-07           1 23.8 90.37    target_1 31.60111 6 2020-03-07           1 23.8 90.37    target_1 32.20208  # Create a directory to download spatial data and save intermediate output dir.create(file.path(getwd(), 'tmp'))  # Download a DEM for the area surrounding sampling sites download_elevation_data(lon = df$lon,                         lat = df$lat,                         path_output = file.path(getwd(), 'tmp'))"},{"path":"https://gilesjohnr.github.io/es/articles/calc_hydro_variables.html","id":"calculate-hydrological-variables","dir":"Articles","previous_headings":"","what":"Calculate hydrological variables","title":"Calculating hydrological variables","text":"intermediate spatial data produced calculation topographical hydrological variables also saved ‘tmp’ output directory.","code":"# Calculate topographical and hydrological variables for each sampling site hydro <- es::get_hydro_data(      lon = template_es_data$lon,      lat = template_es_data$lat,      path_dem_raster = file.path(getwd(), 'tmp/dem.tif'),      path_output = file.path(getwd(), 'tmp') )  hydro  lon   lat elevation slope aspect  twi flow_acc flow_acc_500m km_to_nearest_stream 1 90.37 23.80        12  0.97  90.00 4.77     2.00       5014.22                 2.19 2 90.38 23.80        11  0.98 262.55 7.45    29.59       2706.60                 1.25 3 90.37 23.81        20  1.79 157.20 3.46     1.00       2684.25                 1.92  # Merge with environmental sampling data result <- merge(df, hydro, by=c('lon', 'lat'), all.x=T) head(result)  lon  lat       date location_id target_name ct_value elevation slope aspect  twi flow_acc flow_acc_500m km_to_nearest_stream 1 90.37 23.8 2020-03-07           1    target_0       NA        12  0.97     90 4.77        2       5014.22                 2.19 2 90.37 23.8 2020-03-07           1    target_0       NA        12  0.97     90 4.77        2       5014.22                 2.19 3 90.37 23.8 2020-03-07           1    target_0       NA        12  0.97     90 4.77        2       5014.22                 2.19 4 90.37 23.8 2020-03-07           1    target_0 29.95670        12  0.97     90 4.77        2       5014.22                 2.19 5 90.37 23.8 2020-03-07           1    target_1 31.60111        12  0.97     90 4.77        2       5014.22                 2.19 6 90.37 23.8 2020-03-07           1    target_1 32.20208        12  0.97     90 4.77        2       5014.22                 2.19"},{"path":"https://gilesjohnr.github.io/es/articles/calc_hydro_variables.html","id":"plot-results","dir":"Articles","previous_headings":"","what":"Plot results","title":"Calculating hydrological variables","text":"output data can used analysis visualization. example plot local population calculations shown .","code":"out_path <- file.path(getwd(), 'tmp') rast_dem <- raster::raster(file.path(out_path, 'dem.tif')) rast_slp <- raster::raster(file.path(out_path, 'slope.tif')) rast_asp <- raster::raster(file.path(out_path, 'aspect.tif')) rast_twi <- raster::raster(file.path(out_path, 'twi.tif')) rast_acc <- raster::raster(file.path(out_path, 'flow_acc.tif')) rast_hill <- raster::raster(file.path(out_path, 'hillshade.tif')) shp_streams <- sf::st_read(file.path(out_path, 'streams.shp'), quiet=TRUE)  pts <- sp::SpatialPoints(data.frame(x=hydro$lon, y=hydro$lat), proj4string=CRS(\"+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs\")) pts_buff_500 <- raster::buffer(pts, 500)   plot_base <-      ggplot2::ggplot() +      ggrepel::geom_label_repel(box.padding   = 0.5,                                point.padding = 0.5,                                segment.color = 'black',                                segment.size = 0.25) +      scale_fill_viridis_c(na.value='white') +      coord_equal() +      theme_void() +      theme(plot.title = element_text(hjust = 0.5),            legend.position='right',            legend.title = element_blank(),            legend.key.height=unit(40,'pt'),            legend.key.width=unit(5,'pt'))   tmp <- as.data.frame(rast_dem, xy=TRUE) colnames(tmp)[3] <- 'DEM'  plot_dem <-      plot_base +      geom_raster(data=tmp, aes(x=x, y=y, fill=DEM)) +      geom_point(data=hydro, aes(x=lon, y=lat), pch=1, size=3) +      ggrepel::geom_label_repel(data=hydro, aes(x=lon, y=lat, label=elevation)) +      ggplot2::ggtitle('DEM')   tmp <- as.data.frame(rast_slp, xy=TRUE) colnames(tmp)[3] <- 'slope'  plot_slope <-      plot_base +      geom_raster(data=tmp, aes(x=x, y=y, fill=slope)) +      geom_point(data=hydro, aes(x=lon, y=lat), pch=1, size=3) +      ggrepel::geom_label_repel(data=hydro, aes(x=lon, y=lat, label=slope)) +      ggplot2::ggtitle('Slope')   tmp <- as.data.frame(rast_asp, xy=TRUE) colnames(tmp)[3] <- 'aspect'  plot_aspect <-      plot_base +      geom_raster(data=tmp, aes(x=x, y=y, fill=aspect)) +      geom_point(data=hydro, aes(x=lon, y=lat), pch=1, size=3) +      ggrepel::geom_label_repel(data=hydro, aes(x=lon, y=lat, label=aspect)) +      ggplot2::ggtitle('Aspect')   tmp <- raster::as.data.frame(rast_twi, xy=TRUE) colnames(tmp)[3] <- 'twi'  plot_twi <-      plot_base +      geom_raster(data=tmp, aes(x=x, y=y, fill=twi)) +      geom_point(data=hydro, aes(x=lon, y=lat), pch=1, size=3) +      ggrepel::geom_label_repel(data=hydro, aes(x=lon, y=lat, label=twi)) +      ggplot2::ggtitle('Topographic\\n Wetness Index (TWI)')   tmp <- raster::as.data.frame(rast_acc, xy=TRUE) colnames(tmp)[3] <- 'flow_acc_100m'  plot_acc_500m <-      plot_base +      geom_raster(data=tmp, aes(x=x, y=y, fill=flow_acc_100m)) +      geom_point(data=hydro, aes(x=lon, y=lat), pch=1, size=3) +      geom_sf(data=st_as_sf(pts_buff_500), colour = \"red\", fill = NA) +      ggrepel::geom_label_repel(data=hydro, aes(x=lon, y=lat, label=flow_acc_500m)) +      ggplot2::ggtitle('Total flow accumulation\\n (within 500m)')   tmp <- raster::as.data.frame(rast_hill, xy=TRUE) colnames(tmp)[3] <- 'hillshade'  plot_streams <-      plot_base +      geom_raster(data=tmp, aes(x=x, y=y, fill=hillshade)) +      scale_fill_gradient2(low = \"black\", high = \"grey80\") +      geom_sf(data=st_as_sf(shp_streams), colour = \"blue\", fill = 'blue') +      geom_point(data=hydro, aes(x=lon, y=lat), pch=1, size=3) +      ggrepel::geom_label_repel(data=hydro, aes(x=lon, y=lat, label=km_to_nearest_stream)) +      ggplot2::ggtitle('Distance to nearest\\n stream (km)')   gridExtra::grid.arrange(plot_dem, plot_slope, plot_aspect,                         plot_twi, plot_acc_500m, plot_streams,                         ncol=3)"},{"path":"https://gilesjohnr.github.io/es/articles/calc_local_population.html","id":"download-spatial-data","dir":"Articles","previous_headings":"","what":"Download spatial data","title":"Calculating local population size","text":"Population Digital Elevation Model (DEM) downloaded ‘tmp’ directory.","code":"library(es) library(sp) library(sf) library(raster) library(ggplot2) library(ggrepel) # Get data frame of simulated environmental sampling data df <- es::template_es_data head(df)  date location_id  lat   lon target_name ct_value 1 2020-03-07           1 23.8 90.37    target_0       NA 2 2020-03-07           1 23.8 90.37    target_0       NA 3 2020-03-07           1 23.8 90.37    target_0       NA 4 2020-03-07           1 23.8 90.37    target_0 29.95670 5 2020-03-07           1 23.8 90.37    target_1 31.60111 6 2020-03-07           1 23.8 90.37    target_1 32.20208  # Create a directory to download spatial data and save intermediate output dir.create(file.path(getwd(), 'tmp'))  # Download population raster data from Worldpop es::download_worldpop_data(      iso3 = 'BGD',      year = 2020,      constrained = FALSE,      UN_adjusted = FALSE,      path_output = file.path(getwd(), 'tmp') )  # Download a DEM for the area surrounding sampling sites es::download_elevation_data(      lon = df$lon,      lat = df$lat,      path_output = file.path(getwd(), 'tmp') )"},{"path":"https://gilesjohnr.github.io/es/articles/calc_local_population.html","id":"calculate-local-population","dir":"Articles","previous_headings":"","what":"Calculate local population","title":"Calculating local population size","text":"intermediate spatial data produced delineation drainage catchments calculation population size also saved ‘tmp’ output directory.","code":"# Delineate drainage catchments and calculate the population size within them pop_catchment <- es::get_population_catchment(      lon = df$lon,      lat = df$lat,      path_pop_raster = file.path(getwd(), 'tmp/bgd_ppp_2020.tif'),      path_dem_raster = file.path(getwd(), 'tmp/dem.tif'),      path_output = file.path(getwd(), 'tmp') )  pop_catchment  lon   lat catchment_area_km2 population_catchment 1 90.37 23.80              712.2                69635 2 90.38 23.80               31.0                 2834 3 90.37 23.81                5.2                  279  pop_radius <- es::get_population_radius(      lon = df$lon,      lat = df$lat,      radius = 300,      path_pop_raster = file.path(getwd(), 'tmp/bgd_ppp_2020.tif'),      path_output = file.path(getwd(), 'tmp') )  pop_radius      lon   lat population_radius_300 1 90.37 23.80                 62868 2 90.38 23.80                 38588 3 90.37 23.81                 21450  # Merge with environmental sampling data result <- merge(df, pop_catchment, by=c('lon', 'lat'), all.x=T) result <- merge(result, pop_radius, by=c('lon', 'lat'), all.x=T) head(result)      lon  lat       date location_id target_name ct_value catchment_area_km2 population_catchment population_radius_300 1 90.37 23.8 2020-03-07           1    target_0       NA              712.2                69635                 62868 2 90.37 23.8 2020-03-07           1    target_0       NA              712.2                69635                 62868 3 90.37 23.8 2020-03-07           1    target_0       NA              712.2                69635                 62868 4 90.37 23.8 2020-03-07           1    target_0 29.95670              712.2                69635                 62868 5 90.37 23.8 2020-03-07           1    target_1 31.60111              712.2                69635                 62868 6 90.37 23.8 2020-03-07           1    target_1 32.20208              712.2                69635                 62868"},{"path":"https://gilesjohnr.github.io/es/articles/calc_local_population.html","id":"plot-results","dir":"Articles","previous_headings":"","what":"Plot results","title":"Calculating local population size","text":"output data can used analysis visualization. example plot local population calculations shown .","code":"pts <- sp::SpatialPoints(data.frame(x=pop_catchment$lon, y=pop_catchment$lat), proj4string=sp::CRS(\"+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs\"))  rast_dem <- raster::raster(file.path(getwd(), 'tmp/dem.tif')) rast_pop <- raster::raster(file.path(getwd(), 'tmp/bgd_ppp_2020_crop.tif'))  shp_streams <- sf::st_read(file.path(getwd(), 'tmp/streams.shp'), quiet=TRUE, crs = \"+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs\") shp_catchments <- sf::st_read(file.path(getwd(), 'tmp/catchments.shp'), quiet=TRUE) shp_radius <- sf::st_read(file.path(getwd(), 'tmp/points_buffer_300.shp'), quiet=TRUE)   tmp <- raster::as.data.frame(rast_dem, xy=TRUE) colnames(tmp)[3] <- 'dem'  plot_catchment <-      ggplot2::ggplot() +      geom_raster(data=tmp, aes(x=x, y=y, fill=dem)) +      geom_sf(data=sf::st_as_sf(shp_streams), colour = \"dodgerblue\", fill = NA) +      geom_sf(data=sf::st_as_sf(shp_catchments), colour = \"green\", fill = NA) +      geom_point(data=pop_catchment, aes(x=lon, y=lat), pch=3, size=2, color='red') +      ggrepel::geom_label_repel(data=pop_catchment, aes(x=lon, y=lat, label=catchment_area_km2)) +      ggplot2::ggtitle('Catchment size (sq km)') +      ggrepel::geom_label_repel(box.padding   = 0.5,                                point.padding = 0.5,                                segment.color = 'black',                                segment.size = 0.25) +      scale_fill_gradient(low=\"black\", high=\"white\") +      coord_sf() +      theme_void() +      theme(plot.title = element_text(hjust = 0.5),            legend.position='right',            legend.title = element_blank(),            legend.key.height=unit(40,'pt'),            legend.key.width=unit(5,'pt'))     tmp <- raster::as.data.frame(rast_pop, xy=TRUE) colnames(tmp)[3] <- 'pop'  plot_catchment_pop <-      ggplot2::ggplot() +      geom_raster(data=tmp, aes(x=x, y=y, fill=pop)) +      geom_sf(data=sf::st_as_sf(shp_catchments), colour = \"green\", fill = NA) +      geom_point(data=pop_catchment, aes(x=lon, y=lat), pch=3, size=2, color='red') +      ggrepel::geom_label_repel(data=pop_catchment, aes(x=lon, y=lat, label=population_catchment)) +      ggplot2::ggtitle('Population within catchment') +      ggrepel::geom_label_repel(box.padding   = 0.5,                                point.padding = 0.5,                                segment.color = 'black',                                segment.size = 0.25) +      scale_fill_viridis_c(na.value='white', option='rocket') +      coord_sf() +      theme_void() +      theme(plot.title = element_text(hjust = 0.5),            legend.position='right',            legend.title = element_blank(),            legend.key.height=unit(40,'pt'),            legend.key.width=unit(5,'pt'))   tmp <- raster::as.data.frame(rast_pop, xy=TRUE) colnames(tmp)[3] <- 'pop'  plot_radius_pop <-      ggplot2::ggplot() +      geom_raster(data=tmp, aes(x=x, y=y, fill=pop)) +      geom_sf(data=sf::st_as_sf(shp_radius), colour = \"green\", fill = NA) +      geom_point(data=pop_catchment, aes(x=lon, y=lat), pch=3, size=2, color='red') +      ggrepel::geom_label_repel(data=pop_radius, aes(x=lon, y=lat, label=population_radius_300)) +      ggplot2::ggtitle('Population within radius (300m)') +      ggrepel::geom_label_repel(box.padding   = 0.5,                                point.padding = 0.5,                                segment.color = 'black',                                segment.size = 0.25) +      scale_fill_viridis_c(na.value='white', option='rocket') +      coord_sf() +      theme_void() +      theme(plot.title = element_text(hjust = 0.5),            legend.position='right',            legend.title = element_blank(),            legend.key.height=unit(40,'pt'),            legend.key.width=unit(5,'pt'))   gridExtra::grid.arrange(plot_catchment, plot_catchment_pop, plot_radius_pop, ncol=3)"},{"path":"https://gilesjohnr.github.io/es/articles/derivative_quantities.html","id":"calculating-the-number-of-gene-copies","dir":"Articles","previous_headings":"","what":"Calculating the number of gene copies","title":"Deriving variables from Ct values","text":"Calculating number target gene copies sample form absolute quantification. still susceptible external confounders influence starting amount nucleic acid inhibitors amplification might present (Bustin et al. 2005), count variable interpretable raw Ct values allows adjustment normalization. calculate number target gene copies, standardization assay required relates known concentrations gene target expected Ct values specific PCR machine reagents used, data referred ‘standard curve’ (Pfaffl 2012). Assuming PCR machine’s amplification efficiency 100%, number gene copies expected double cycle (Ruijter et al. 2009) resulting logarithmic relationship Ct values gene copies, number target gene copies decreases exponentially number PCR cycles increases linearly. Due logarithmic relationship PCR kinetics use log-linear model relate known gene target quantities standard curve Ct values observed qPCR performed study samples: \\[ \\log(\\text{number gene copies}_i) \\sim \\alpha + \\beta_i \\cdot \\text{Ct value}_i + \\epsilon. \\] code shows use calc_n_copies() function template_es_data template_standard_curve objects calculate number target gene copies. Note response variable number target gene copies convenient interpretable Ct value method, however absolute quantification method may need normalization adjust environmental confounders. variable can also used create relative quantity relating endogenous reference gene using relative quantification like \\(\\Delta\\Delta\\)Ct make help interpretation.","code":"df <- es::template_es_data head(df)  date location_id  lat   lon target_name ct_value 1 2020-03-07           1 23.8 90.37    target_0       NA 2 2020-03-07           1 23.8 90.37    target_0       NA 3 2020-03-07           1 23.8 90.37    target_0       NA 4 2020-03-07           1 23.8 90.37    target_0 29.95670 5 2020-03-07           1 23.8 90.37    target_1 31.60111 6 2020-03-07           1 23.8 90.37    target_1 32.20208  sc <- es::template_standard_curve head(sc)  target_name n_copies ct_value 1    target_0    1e+01 31.54740 2    target_0    1e+02 26.95023 3    target_0    1e+03 22.39630 4    target_0    1e+04 21.47894 5    target_0    1e+05 16.04474 6    target_1    1e+01 31.85645  result <- es::calc_n_copies(ct_values = df$ct_value,                             target_names = df$target_name,                             standard_curves = sc)  df$n_copies <- result head(df)  date location_id  lat   lon target_name ct_value n_copies 1 2020-03-07           1 23.8 90.37    target_0       NA       NA 2 2020-03-07           1 23.8 90.37    target_0       NA       NA 3 2020-03-07           1 23.8 90.37    target_0       NA       NA 4 2020-03-07           1 23.8 90.37    target_0 29.95670 21.59581 5 2020-03-07           1 23.8 90.37    target_1 31.60111 32.99040 6 2020-03-07           1 23.8 90.37    target_1 32.20208 21.93164"},{"path":"https://gilesjohnr.github.io/es/articles/derivative_quantities.html","id":"calculating-the-relative-change-in-gene-expression","dir":"Articles","previous_headings":"","what":"Calculating the relative change in gene expression","title":"Deriving variables from Ct values","text":"Description \\(\\Delta\\Delta\\)Ct method (Livak Schmittgen 2001).","code":""},{"path":[]},{"path":"https://gilesjohnr.github.io/es/articles/get_climate_data.html","id":"setup-with-environmental-sampling-observations","dir":"Articles","previous_headings":"","what":"Setup with environmental sampling observations","title":"Getting climate data","text":"","code":"library(es) library(ggplot2)  # Get data frame of simulated environmental sampling data df <- es::template_es_data head(df)  date location_id  lat   lon target_name ct_value 1 2020-03-07           1 23.8 90.37    target_0       NA 2 2020-03-07           1 23.8 90.37    target_0       NA 3 2020-03-07           1 23.8 90.37    target_0       NA 4 2020-03-07           1 23.8 90.37    target_0 29.95670 5 2020-03-07           1 23.8 90.37    target_1 31.60111 6 2020-03-07           1 23.8 90.37    target_1 32.20208"},{"path":"https://gilesjohnr.github.io/es/articles/get_climate_data.html","id":"precipitation-data","dir":"Articles","previous_headings":"","what":"Precipitation data","title":"Getting climate data","text":"","code":"# Get precipitation data precip <- es::get_precip_data(lon = df$lon,                               lat = df$lat,                               dates = df$date,                               intervals = c(1,3,7))  head(precip)     id  lat   lon       date precip_daily_sum precip_daily_sum_1 precip_daily_sum_3 precip_daily_sum_7 8   1 23.8 90.37 2020-03-07              2.6               15.8               24.4               30.2 9   1 23.8 90.37 2020-03-08              2.3                4.9               24.0               32.5 10  1 23.8 90.37 2020-03-09              0.0                2.3               18.1               32.5 11  1 23.8 90.37 2020-03-10              0.0                0.0                4.9               32.5 12  1 23.8 90.37 2020-03-11              0.0                0.0                2.3               26.7 13  1 23.8 90.37 2020-03-12              0.0                0.0                0.0               24.0  ggplot2::ggplot(precip, aes(x = date)) +      geom_line(aes(y = precip_daily_sum_7, col='Cumulative sum 7 days')) +      geom_line(aes(y = precip_daily_sum_3, col='Cumulative sum 3 days')) +      geom_line(aes(y = precip_daily_sum_1, col='Cumulative sum 1 day')) +      geom_line(aes(y = precip_daily_sum)) +      facet_grid(rows=vars(id)) +      labs(x=\"\", y = \"Precipitation (mm)\") +      theme_bw() +      theme(legend.position = 'bottom',            legend.title = element_blank())"},{"path":"https://gilesjohnr.github.io/es/articles/get_climate_data.html","id":"temperature-data","dir":"Articles","previous_headings":"","what":"Temperature data","title":"Getting climate data","text":"","code":"# Get temperature data temp <- es::get_temp_data(lon = df$lon,                           lat = df$lat,                           dates = df$date,                           intervals = c(1,5,10))  head(temp)     id  lat   lon       date temp_daily_atu temp_daily_atu_1 temp_daily_atu_5 temp_daily_atu_10 11  1 23.8 90.37 2020-03-07       21.74167         44.39167         139.3792          245.8292 12  1 23.8 90.37 2020-03-08       22.37917         44.12083         137.4625          248.1125 13  1 23.8 90.37 2020-03-09       22.32917         44.70833         135.8833          249.9000 14  1 23.8 90.37 2020-03-10       22.08750         44.41667         134.8625          250.8208 15  1 23.8 90.37 2020-03-11       24.07917         46.16667         135.2667          253.2375 16  1 23.8 90.37 2020-03-12       26.17917         50.25833         138.7958          256.4333  ggplot2::ggplot(temp, aes(x = date)) +      geom_line(aes(y = temp_daily_atu_10, col='Accumulated temperature 10 days')) +      geom_line(aes(y = temp_daily_atu_5, col='Accumulated temperature 5 days')) +      geom_line(aes(y = temp_daily_atu_1, col='Accumulated temperature 1 day')) +      geom_line(aes(y = temp_daily_atu)) +      facet_grid(rows=vars(id)) +      labs(x=\"\", y = \"Accumulated Thermal Units (ATUs)\") +      theme_bw() +      theme(legend.position = 'bottom',            legend.title = element_blank())"},{"path":"https://gilesjohnr.github.io/es/articles/get_climate_data.html","id":"evaporative-stress-index-esi-data","dir":"Articles","previous_headings":"","what":"Evaporative Stress Index (ESI) data","title":"Getting climate data","text":"","code":"# Evaporative Stress Index (ESI) data esi <- es::get_esi_data(lon = df$lon,                         lat = df$lat,                         dates = df$date,                         intervals = c(5,10,20)) head(esi)    id       date   lon  lat esi_daily_avg observed esi_daily_avg_5 esi_daily_avg_10 esi_daily_avg_20 1  1 2020-03-07 90.37 23.8     0.4875092        0       0.7513141        1.1653987         1.699109 2  1 2020-03-08 90.37 23.8     0.4014352        0       0.6328268        1.0174448         1.607651 3  1 2020-03-09 90.37 23.8     0.3153611        0       0.5305462        0.8783309         1.510441 4  1 2020-03-10 90.37 23.8     0.2292871        0       0.4444722        0.7480570         1.407479 5  1 2020-03-11 90.37 23.8     0.1432131        1       0.3583981        0.6266231         1.298765 6  1 2020-03-12 90.37 23.8     0.1144625        0       0.2818780        0.5192403         1.191385  ggplot2::ggplot(esi, aes(x = date)) +      geom_line(aes(y = esi_daily_avg_20, col='Average ESI 20 days')) +      geom_line(aes(y = esi_daily_avg_10, col='Average ESI 10 days')) +      geom_line(aes(y = esi_daily_avg_5, col='Average ESI 5 days')) +      geom_line(aes(y = esi_daily_avg)) +      facet_grid(rows=vars(id)) +      labs(x=\"\", y = \"Evaporative Stress Index (ESI)\") +      theme_bw() +      theme(legend.position = 'bottom',            legend.title = element_blank())"},{"path":"https://gilesjohnr.github.io/es/articles/get_climate_data.html","id":"daily-discharge-data-from-nearest-river","dir":"Articles","previous_headings":"","what":"Daily discharge data from nearest river","title":"Getting climate data","text":"","code":"# Get daily discharge data from nearest river river <- es::get_river_discharge_data(lon = df$lon,                                       lat = df$lat,                                       dates = df$date)  head(river)    id  lat   lon       date daily_river_discharge 1  1 23.8 90.37 2020-03-07                  1.31 2  1 23.8 90.37 2020-03-08                  1.12 3  1 23.8 90.37 2020-03-09                  1.03 4  1 23.8 90.37 2020-03-10                  0.97 5  1 23.8 90.37 2020-03-11                  0.94 6  1 23.8 90.37 2020-03-12                  0.94  ggplot2::ggplot(river, aes(x = date)) +      geom_line(aes(y = daily_river_discharge)) +      facet_grid(rows=vars(id)) +      labs(x=\"\", y = \"Local River Discharge (m^3/s)\") +      theme_bw() +      theme(legend.position = 'bottom',            legend.title = element_blank())"},{"path":"https://gilesjohnr.github.io/es/articles/get_climate_data.html","id":"merge-climate-data-with-environmental-sampling-observations","dir":"Articles","previous_headings":"","what":"Merge climate data with environmental sampling observations","title":"Getting climate data","text":"","code":"# Merge climate data with environmental sampling observations climate_data <- c('precip', 'temp', 'esi', 'river')  for (i in 0:length(climate_data)) {       if (i == 0) {            result <- df       } else {            result <- merge(result,                           subset(get(climate_data[i]), select=-c(id)),                           by=c('lon', 'lat', 'date'),                           all.x=TRUE)       }  }  head(result)      lon  lat       date location_id target_name ct_value precip_daily_sum precip_daily_sum_1 precip_daily_sum_3 precip_daily_sum_7 temp_daily_atu 1 90.37 23.8 2020-03-07           1    target_2 33.42286              2.6               15.8               24.4               30.2       21.74167 2 90.37 23.8 2020-03-07           1    target_2 33.42286              2.6               15.8               24.4               30.2       21.74167 3 90.37 23.8 2020-03-07           1    target_2 33.42286              2.6               15.8               24.4               30.2       21.74167 4 90.37 23.8 2020-03-07           1    target_3 32.88970              2.6               15.8               24.4               30.2       21.69167 5 90.37 23.8 2020-03-07           1    target_3 32.88970              2.6               15.8               24.4               30.2       21.69167 6 90.37 23.8 2020-03-07           1    target_3 32.88970              2.6               15.8               24.4               30.2       21.69167   temp_daily_atu_1 temp_daily_atu_5 temp_daily_atu_10 esi_daily_avg observed esi_daily_avg_5 esi_daily_avg_10 esi_daily_avg_20 daily_river_discharge 1         44.39167         139.3792          245.8292     0.4875092        0       0.7513141         1.165399         1.699109                  1.31 2         44.39167         139.3792          245.8292     0.4875092        0       0.7513141         1.165399         1.699109                  1.31 3         44.39167         139.3792          245.8292     0.4875092        0       0.7513141         1.165399         1.699109                  0.69 4         44.28333         139.0708          245.2917     0.4875092        0       0.7513141         1.165399         1.699109                  1.31 5         44.28333         139.0708          245.2917     0.4875092        0       0.7513141         1.165399         1.699109                  1.31 6         44.28333         139.0708          245.2917     0.4875092        0       0.7513141         1.165399         1.699109                  0.69"},{"path":"https://gilesjohnr.github.io/es/articles/get_climate_data.html","id":"save-downloaded-climate-data","dir":"Articles","previous_headings":"","what":"Save downloaded climate data","title":"Getting climate data","text":"","code":"out_path <- file.path(getwd(), 'tmp') dir.create(out_path)  for (i in 1:length(climate_data)) {       write.csv(get(x = climate_data[i]),                file = file.path(out_path, paste0('climate_data_', climate_data[i], '.csv')),                row.names = FALSE)  }"},{"path":"https://gilesjohnr.github.io/es/articles/template_es_data.html","id":"template-environmental-sampling-data","dir":"Articles","previous_headings":"","what":"Template environmental sampling data","title":"Templates for input data sets","text":"primary data required methods es package shown template_es_data object. data 6 columns give time location observation Cycle Threshold (Ct) value qPCR assay. code shows view data template: detailed descriptions variable template_es_data object shown table :","code":"library(es) head(template_es_data) date location_id  lat   lon target_name ct_value 1 2020-03-07           1 23.8 90.37    target_0       NA 2 2020-03-07           1 23.8 90.37    target_0       NA 3 2020-03-07           1 23.8 90.37    target_0       NA 4 2020-03-07           1 23.8 90.37    target_0 29.94516 5 2020-03-07           1 23.8 90.37    target_1 31.61178 6 2020-03-07           1 23.8 90.37    target_1 32.22351  str(template_es_data) 'data.frame':   5200 obs. of  6 variables:      $ date       : IDate, format: \"2020-03-07\" \"2020-03-07\" ... $ location_id: int  1 1 1 1 1 1 1 1 1 1 ... $ lat        : num  23.8 23.8 23.8 23.8 23.8 23.8 23.8 23.8 23.8 23.8 ... $ lon        : num  90.4 90.4 90.4 90.4 90.4 ... $ target_name: chr  \"target_0\" \"target_0\" \"target_0\" \"target_0\" ... $ ct_value   : num  NA NA NA 29.9 31.6 ..."},{"path":"https://gilesjohnr.github.io/es/articles/template_es_data.html","id":"template-standard-curve-data","dir":"Articles","previous_headings":"","what":"Template standard curve data","title":"Templates for input data sets","text":"Standard curve data provide results standardized qPCR assays relate Ct values number gene copies particular target. data, calc_n_copies() function infer number gene copies observed Ct values data set formatted according template_es_data object. view template standard curve data, see code : detailed descriptions variable template_standard_curve object shown table :","code":"library(es) head(template_standard_curve)   target_name n_copies ct_value 1    target_1    1e+01 31.29322 2    target_1    1e+02 27.73392 3    target_1    1e+03 23.48097 4    target_1    1e+04 18.91412 5    target_1    1e+05 16.68971 6    target_2    1e+01 32.34237  str(template_standard_curve) 'data.frame':   15 obs. of  3 variables:  $ target_name: chr  \"target_1\" \"target_1\" \"target_1\" \"target_1\" ...  $ n_copies   : num  1e+01 1e+02 1e+03 1e+04 1e+05 1e+01 1e+02 1e+03 1e+04 1e+05 ...  $ ct_value   : num  31.3 27.7 23.5 18.9 16.7 ..."},{"path":"https://gilesjohnr.github.io/es/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"John R Giles. Maintainer.","code":""},{"path":"https://gilesjohnr.github.io/es/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"c, email=\"john.giles@gatesfoundation.org\")) (2024). es: Tools analyzing environmental sampling data. R package version 0.0.1, https://gilesjohnr.github.io/es/.","code":"@Manual{,   title = {es: Tools for analyzing environmental sampling data},   author = {{c} and {email=\"john.giles@gatesfoundation.org\"))}},   year = {2024},   note = {R package version 0.0.1},   url = {https://gilesjohnr.github.io/es/}, }"},{"path":"https://gilesjohnr.github.io/es/index.html","id":"es-an-r-package-for-analyzing-environmental-sampling-data-","dir":"","previous_headings":"","what":"Tools for analyzing environmental sampling data","title":"Tools for analyzing environmental sampling data","text":"package provides reproducible functions parsing compiling data sets measure infectious disease burden using Environmental Sampling (ES) methods. tools developed specifically epidemiological surveillance studies multiple pathogens locations Dhaka, Bangladesh Karachi, Pakistan. However, functions generalize applications provided use data formats. package currently development maintained John Giles (@gilesjohnr), details data models .","code":""},{"path":"https://gilesjohnr.github.io/es/index.html","id":"required-data","dir":"","previous_headings":"","what":"Required data","title":"Tools for analyzing environmental sampling data","text":"tools intended heavy lifting combining data multiple sources calculating relevant quantities. However, use must start putting data following standard format: standardized ES data format viral load calculations, information standard curves also required.","code":""},{"path":[]},{"path":"https://gilesjohnr.github.io/es/index.html","id":"derivative-quantities","dir":"","previous_headings":"Methods","what":"Derivative quantities","title":"Tools for analyzing environmental sampling data","text":"Calculate viral load (requires standard curve data) Calculate delta delta Ct (requires reference target)","code":""},{"path":"https://gilesjohnr.github.io/es/index.html","id":"adding-metadata","dir":"","previous_headings":"Methods","what":"Adding metadata","title":"Tools for analyzing environmental sampling data","text":"Retrieve metadata: Precipitation Temperature Evaporative Stress Index (ESI) Elevation Topography (slope, aspect) Topographical Wetness Index (TWI) Flow Accumulation Discharge nearest river Drainage catchments (based streams user provided sewer network) Population sizes (within catchments user defined radius around sampling sites) Administrative units Calculate summary sampling statistics Estimate cross correlations Estimate time series models Estimate models pathogen presence based multiple gene targets","code":""},{"path":"https://gilesjohnr.github.io/es/index.html","id":"visualization","dir":"","previous_headings":"","what":"Visualization","title":"Tools for analyzing environmental sampling data","text":"Launch Rshiny application","code":""},{"path":"https://gilesjohnr.github.io/es/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Tools for analyzing environmental sampling data","text":"full demo package please see vignettes located .","code":""},{"path":"https://gilesjohnr.github.io/es/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for analyzing environmental sampling data","text":"Use devtools package install development version es GitHub repository. R version >= 3.5.0 recommended.","code":"install.packages(\"whitebox\", dependencies=TRUE) whitebox::install_whitebox() whitebox::wbt_version()  install.packages('devtools') devtools::install_github(\"gilesjohnr/es\", dependencies=TRUE)"},{"path":"https://gilesjohnr.github.io/es/index.html","id":"troubleshooting","dir":"","previous_headings":"","what":"Troubleshooting","title":"Tools for analyzing environmental sampling data","text":"general questions, contact John Giles (john.giles@gatesfoundation.org) /Jillian Gauld (jillian.gauld@gatesfoundation.org). Note software made available Creative Commons 4.0 license developed specific environmental sampling applications therefore may generalize perfectly settings.","code":""},{"path":"https://gilesjohnr.github.io/es/index.html","id":"funding","dir":"","previous_headings":"","what":"Funding","title":"Tools for analyzing environmental sampling data","text":"work developed Institute Disease Modeling support funded research grants made Bill & Melinda Gates Foundation.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/apply_delta_delta_ct.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply the delta delta Ct calculation to a data.frame — apply_delta_delta_ct","title":"Apply the delta delta Ct calculation to a data.frame — apply_delta_delta_ct","text":"function calculate delta delta Ct metric applicable observations data.frame applying calc_delta_delta_ct function. data.frame must following columns: 'location_id', 'sample_date', 'target_name', 'ct_value'. relevant target_names associated reference_names must provided. result data.frame containing 'delta_delta_ct' column can merge source data.frame.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/apply_delta_delta_ct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply the delta delta Ct calculation to a data.frame — apply_delta_delta_ct","text":"","code":"apply_delta_delta_ct(   df,   target_names,   reference_names,   amplification_efficiency = 1 )"},{"path":"https://gilesjohnr.github.io/es/reference/apply_delta_delta_ct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply the delta delta Ct calculation to a data.frame — apply_delta_delta_ct","text":"df data.frame containing following columns: 'location_id', 'sample_date', 'target_name', 'ct_value'. target_names Character vector giving names target genes. reference_names Character vector giving names reference genes associated target gene. amplification_efficiency scalar 0 1 giving assumed PCR amplification efficiency samples equation. Defaults 1, assumes 100% efficiency.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/apply_delta_delta_ct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply the delta delta Ct calculation to a data.frame — apply_delta_delta_ct","text":"data.frame","code":""},{"path":"https://gilesjohnr.github.io/es/reference/apply_delta_delta_ct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply the delta delta Ct calculation to a data.frame — apply_delta_delta_ct","text":"","code":"if (FALSE) {  df_example <- data.frame(location_id = c(rep(1,9), rep(2,9), rep(3,9)),                          sample_date = as.Date(rep(c(rep('2024-01-01',3),                                                      rep('2024-01-02',3),                                                      rep('2024-01-03',3)),                                                    3)),                          target_name = rep(c('gene1', 'gene2', 'housekeeping'), 9),                          ct_value = as.numeric(runif(27, min=5, max=40)))  df_result <- apply_delta_delta_ct(df = df_example,                                   target_names = c('gene1', 'gene2'),                                   reference_names = c('housekeeping', 'housekeeping'),                                   amplification_efficiency = 0.95)  merge(df_example,       df_result,       by=c('location_id', 'sample_date', 'target_name'),       all.x=TRUE)  }"},{"path":"https://gilesjohnr.github.io/es/reference/calc_delta_delta_ct.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate delta delta Ct — calc_delta_delta_ct","title":"Calculate delta delta Ct — calc_delta_delta_ct","text":"function calculates relative gene expression using delta delta Ct method described Livak Schmittgen (2001).","code":""},{"path":"https://gilesjohnr.github.io/es/reference/calc_delta_delta_ct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate delta delta Ct — calc_delta_delta_ct","text":"","code":"calc_delta_delta_ct(   ct_target_t,   ct_reference_t,   ct_target_t0,   ct_reference_t0,   amplification_efficiency = 1 )"},{"path":"https://gilesjohnr.github.io/es/reference/calc_delta_delta_ct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate delta delta Ct — calc_delta_delta_ct","text":"ct_target_t scalar providing Ct value target gene observation time t ct_reference_t scalar providing Ct value reference gene observation time t ct_target_t0 scalar providing Ct value target gene reference observation time t=0 ct_reference_t0 scalar providing Ct value reference gene reference observation time t=0 amplification_efficiency scalar 0 1 giving assumed PCR amplification efficiency samples equation. Defaults 1, assumes 100% efficiency.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/calc_delta_delta_ct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate delta delta Ct — calc_delta_delta_ct","text":"Scalar","code":""},{"path":"https://gilesjohnr.github.io/es/reference/calc_delta_delta_ct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate delta delta Ct — calc_delta_delta_ct","text":"","code":"if (FALSE) {  calc_delta_delta_ct(ct_target_t = 32.5,                     ct_reference_t = 25,                     ct_target_t0 = 34,                     ct_reference_t0 = 30,                     amplification_efficiency = 0.95)  }"},{"path":"https://gilesjohnr.github.io/es/reference/calc_n_copies.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate number of target copies — calc_n_copies","title":"Calculate number of target copies — calc_n_copies","text":"function calculates quantitative value qPCR Ct value. Cycle threshold converted estimated number gene target copies (e.g. viral load viral pathogen) fitting log linear model standard curve data using model find point estimate provided Ct values.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/calc_n_copies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate number of target copies — calc_n_copies","text":"","code":"calc_n_copies(ct_values, target_names, standard_curves)"},{"path":"https://gilesjohnr.github.io/es/reference/calc_n_copies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate number of target copies — calc_n_copies","text":"ct_values numeric vector giving Ct value observation. target_names character vector giving target names element 'ct_values'. standard_curves data.frame containing results standard curve dilution experiment. Elements 'target_names' must map either 'target_name_unique' 'target_name_concise'. See package data object standard_curves_dhaka template.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/calc_n_copies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate number of target copies — calc_n_copies","text":"Vector","code":""},{"path":"https://gilesjohnr.github.io/es/reference/calc_n_copies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate number of target copies — calc_n_copies","text":"","code":"if (FALSE) {  compiled_tac <- read.csv('/Users/tac/compiled_tac.csv')  test <- calc_n_copies(ct_values = compiled_tac$ct_value,                       target_names = compiled_tac$target_name,                       standard_curves = standard_curves_dhaka)  compiled_tac$n_copies <- test  }"},{"path":"https://gilesjohnr.github.io/es/reference/calc_sample_sizes.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate sample sizes — calc_sample_sizes","title":"Calculate sample sizes — calc_sample_sizes","text":"function takes compiled data.frame compile_tac_data calculates basic sample sizes targets.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/calc_sample_sizes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate sample sizes — calc_sample_sizes","text":"","code":"calc_sample_sizes(d)"},{"path":"https://gilesjohnr.github.io/es/reference/calc_sample_sizes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate sample sizes — calc_sample_sizes","text":"d data.frame produced compile_tac_data function containing 'target_name' 'ct_value' columns.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/calc_sample_sizes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate sample sizes — calc_sample_sizes","text":"data.frame","code":""},{"path":"https://gilesjohnr.github.io/es/reference/calc_sample_sizes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate sample sizes — calc_sample_sizes","text":"","code":"if (FALSE) {  compiled_tac <- read.csv('/Users/tac/compiled_tac.csv') calc_sample_sizes(compiled_tac)  }"},{"path":"https://gilesjohnr.github.io/es/reference/coords_to_iso3.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert coordinates to ISO country code — coords_to_iso3","title":"Convert coordinates to ISO country code — coords_to_iso3","text":"function takes set longitude latitude coordinates retrieves administrative units point lies within. administrative units given ISO-3166 Alpha-3 country code standard (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3).","code":""},{"path":"https://gilesjohnr.github.io/es/reference/coords_to_iso3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert coordinates to ISO country code — coords_to_iso3","text":"","code":"coords_to_iso3(lon, lat)"},{"path":"https://gilesjohnr.github.io/es/reference/coords_to_iso3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert coordinates to ISO country code — coords_to_iso3","text":"lon numeric vector giving longitude sampling sites Decimal Degrees. lat numeric vector giving latitude sampling sites Decimal Degrees.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/coords_to_iso3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert coordinates to ISO country code — coords_to_iso3","text":"data.frame","code":""},{"path":"https://gilesjohnr.github.io/es/reference/coords_to_iso3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert coordinates to ISO country code — coords_to_iso3","text":"","code":"if (FALSE) {  coords_to_iso3(lon = template_es_data$lon,                lat = template_es_data$lat)  }"},{"path":"https://gilesjohnr.github.io/es/reference/dot-init_pb.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a progress bar — .init_pb","title":"Initialize a progress bar — .init_pb","text":"wrapper function 'progress' package initialize default progress bar long loops","code":""},{"path":"https://gilesjohnr.github.io/es/reference/dot-init_pb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a progress bar — .init_pb","text":"","code":".init_pb(x)"},{"path":"https://gilesjohnr.github.io/es/reference/dot-init_pb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a progress bar — .init_pb","text":"x Integer giving length loop","code":""},{"path":"https://gilesjohnr.github.io/es/reference/dot-init_pb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize a progress bar — .init_pb","text":"","code":"if (FALSE) {      len <- 100      pb <- .init_pb(len)      for (i in 1:len) {           pb$tick()           Sys.sleep(0.01)           } }"},{"path":"https://gilesjohnr.github.io/es/reference/download_admin_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Download administrative boundaries from GADM — download_admin_data","title":"Download administrative boundaries from GADM — download_admin_data","text":"function takes single ISO country code, vector multiple ISO country codes, downloads corresponding high resolution administrative boundary shapefiles https://gadm.org/ via geodata::gadm function. detailed administrative units returned (level 4 countries).","code":""},{"path":"https://gilesjohnr.github.io/es/reference/download_admin_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download administrative boundaries from GADM — download_admin_data","text":"","code":"download_admin_data(iso3, path_output)"},{"path":"https://gilesjohnr.github.io/es/reference/download_admin_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download administrative boundaries from GADM — download_admin_data","text":"iso3 three-letter capitalized character string. Must follow ISO-3166 Alpha-3 country code standard (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3). Can accept vector multiple ISO codes. path_output character string giving file path output directory save downloaded data.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/download_admin_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download administrative boundaries from GADM — download_admin_data","text":"","code":"if (FALSE) {  download_admin_data(iso3 = c('FRA', 'ITA'), path_output = getwd())  }"},{"path":"https://gilesjohnr.github.io/es/reference/download_elevation_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Download DEM from AWS Terrain Tiles — download_elevation_data","title":"Download DEM from AWS Terrain Tiles — download_elevation_data","text":"function takes coordinates sampling sites (longitude latitude) downloads Digital Elevation Model (DEM) surrounding area. DEM approximate spatial resolution 100 meters. data derived Shuttle Radar Topography Mission (SRTM) DEM, accessible Amazon Web Services (AWS) API elevatr R package.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/download_elevation_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download DEM from AWS Terrain Tiles — download_elevation_data","text":"","code":"download_elevation_data(lon, lat, path_output)"},{"path":"https://gilesjohnr.github.io/es/reference/download_elevation_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download DEM from AWS Terrain Tiles — download_elevation_data","text":"lon numeric vector giving longitude sampling sites Decimal Degrees.Can accept vector multiple ISO codes. lat numeric vector giving latitude sampling sites Decimal Degrees. path_output character string giving file path output directory save downloaded data.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/download_elevation_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download DEM from AWS Terrain Tiles — download_elevation_data","text":"","code":"if (FALSE) {  download_elevation_data(lon = template_es_data$lon,                         lat = template_es_data$lat,                         path_output = getwd())  }"},{"path":"https://gilesjohnr.github.io/es/reference/download_gadm_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Download administrative boundaries from GADM — download_gadm_data","title":"Download administrative boundaries from GADM — download_gadm_data","text":"function takes single ISO country code, vector multiple ISO country codes, downloads corresponding high resolution administrative boundary shapefiles https://gadm.org/ via geodata::gadm function. detailed administrative units returned (level 4 countries).","code":""},{"path":"https://gilesjohnr.github.io/es/reference/download_gadm_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download administrative boundaries from GADM — download_gadm_data","text":"","code":"download_gadm_data(iso3, output_path)"},{"path":"https://gilesjohnr.github.io/es/reference/download_gadm_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download administrative boundaries from GADM — download_gadm_data","text":"iso3 three-letter capitalized character string. Must follow ISO-3166 Alpha-3 country code standard (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3). Can accept vector multiple ISO codes. output_path character string giving file path output directory save downloaded data.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/download_gadm_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download administrative boundaries from GADM — download_gadm_data","text":"","code":"if (FALSE) {  download_gadm_data(iso3 = c('FRA', 'ITA'), output_path = getwd())  }"},{"path":"https://gilesjohnr.github.io/es/reference/download_population_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Download population raster data from WorldPop — download_population_data","title":"Download population raster data from WorldPop — download_population_data","text":"function takes single ISO country code, vector multiple ISO country codes, downloads appropriate 100m resolution population count raster data WorldPop REST API. Note data spatial disaggregations census data using random forest models described Lloyd et al. 2019 available manual download https://hub.worldpop.org/geodata/listing?id=29. Downloaded data sets saved output_path directory .tif format.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/download_population_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download population raster data from WorldPop — download_population_data","text":"","code":"download_population_data(iso3, output_path)"},{"path":"https://gilesjohnr.github.io/es/reference/download_population_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download population raster data from WorldPop — download_population_data","text":"iso3 three-letter capitalized character string. Must follow ISO-3166 Alpha-3 country code standard (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3). Can accept vector multiple ISO codes. output_path character string giving file path output directory save downloaded data.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/download_population_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download population raster data from WorldPop — download_population_data","text":"","code":"if (FALSE) {  download_population_data(iso3 = 'FRA', output_path = getwd())  }"},{"path":"https://gilesjohnr.github.io/es/reference/download_wopr_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Download population raster data from WorldPop — download_wopr_data","title":"Download population raster data from WorldPop — download_wopr_data","text":"function takes single ISO country code, vector multiple ISO country codes, downloads appropriate 100m resolution population count raster data WorldPop REST API. Note data spatial disaggregations census data using random forest models described Lloyd et al. 2019 available manual download https://hub.worldpop.org/geodata/listing?id=29. Downloaded data sets saved output_path directory .tif format.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/download_wopr_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download population raster data from WorldPop — download_wopr_data","text":"","code":"download_wopr_data(iso3, output_path)"},{"path":"https://gilesjohnr.github.io/es/reference/download_wopr_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download population raster data from WorldPop — download_wopr_data","text":"iso3 three-letter capitalized character string. Must follow ISO-3166 Alpha-3 country code standard (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3). Can accept vector multiple ISO codes. output_path character string giving file path output directory save downloaded data.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/download_wopr_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download population raster data from WorldPop — download_wopr_data","text":"","code":"if (FALSE) {  download_wopr_data(iso3 = 'FRA', output_path = getwd())  }"},{"path":"https://gilesjohnr.github.io/es/reference/download_worldpop_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Download WorldPop population raster data — download_worldpop_data","title":"Download WorldPop population raster data — download_worldpop_data","text":"function takes single ISO country code downloads appropriate population count raster data (100m grid cell resolution) WorldPop FTP data server. Note data spatial disaggregations census data using random forest models described Lloyd et al. 2019 available manual download https://hub.worldpop.org/geodata/listing?id=29. Downloaded data sets saved path_output directory .tif format.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/download_worldpop_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download WorldPop population raster data — download_worldpop_data","text":"","code":"download_worldpop_data(   iso3,   year,   constrained = FALSE,   UN_adjusted = FALSE,   path_output )"},{"path":"https://gilesjohnr.github.io/es/reference/download_worldpop_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download WorldPop population raster data — download_worldpop_data","text":"iso3 three-letter capitalized character string. Must follow ISO-3166 Alpha-3 country code standard (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3). Can accept vector multiple ISO codes. year numeric integer scalar giving year WorldPop data download (2024-05-15, years 2000-2020 available) constrained Logical indicating whether get population counts estimated using constrained models (details ). Default FALSE. UN_adjusted Logical indicating whether get population counts adjusted match United Nations national population estimates (details ). Default FALSE. path_output character string giving file path output directory save downloaded data.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/download_worldpop_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download WorldPop population raster data — download_worldpop_data","text":"","code":"if (FALSE) {  download_worldpop_data(iso3='TWN',                        year=2020,                        constrained=FALSE,                        UN_adjusted=FALSE,                        path_output=getwd())  }"},{"path":"https://gilesjohnr.github.io/es/reference/get_admin_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get administrative data for a set of points — get_admin_data","title":"Get administrative data for a set of points — get_admin_data","text":"function takes set longitude latitude coordinates retrieves administrative units point lies within. high resolution shapefiles used determine administrative boundaries acquired https://gadm.org/ via geodata::gadm function.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_admin_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get administrative data for a set of points — get_admin_data","text":"","code":"get_admin_data(lon, lat, path_admin_data)"},{"path":"https://gilesjohnr.github.io/es/reference/get_admin_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get administrative data for a set of points — get_admin_data","text":"lon numeric vector giving longitude sampling sites Decimal Degrees. lat numeric vector giving latitude sampling sites Decimal Degrees. path_admin_data file path admin data. Note function expects .rds format output download_admin_data function.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_admin_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get administrative data for a set of points — get_admin_data","text":"data.frame","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_admin_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get administrative data for a set of points — get_admin_data","text":"","code":"if (FALSE) {  download_admin_data(iso3 = \"BGD\", path_output = getwd())  get_admin_data(lon = template_es_data$lon,                lat = template_es_data$lat,                path_admin_data = file.path(getwd(), 'gadm/gadm41_BGD_4_pk.rds'))  }"},{"path":"https://gilesjohnr.github.io/es/reference/get_elevation_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get elevation data — get_elevation_data","title":"Get elevation data — get_elevation_data","text":"function takes information set environmental samples collected retrieves elevation (meters) locations approximate 100m spatial resolution. Data come SRTM DEM accessed Amazon Web Services (AWS) API elevatr R package.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_elevation_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get elevation data — get_elevation_data","text":"","code":"get_elevation_data(lon, lat)"},{"path":"https://gilesjohnr.github.io/es/reference/get_elevation_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get elevation data — get_elevation_data","text":"lon numeric vector giving longitude sampling sites Decimal Degrees. lat numeric vector giving latitude sampling sites Decimal Degrees.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_elevation_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get elevation data — get_elevation_data","text":"data.frame","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_elevation_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get elevation data — get_elevation_data","text":"","code":"if (FALSE) {  get_elevation_data(lon = template_es_data$lon,                    lat = template_es_data$lat)  }"},{"path":"https://gilesjohnr.github.io/es/reference/get_esi_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Evaporative Stress Index (ESI) data — get_esi_data","title":"Get Evaporative Stress Index (ESI) data — get_esi_data","text":"function takes information set environmental samples collected retrieves Evaporative Stress Index (ESI) locations times. information ESI, see description . Data come Climate Hazards Center InfraRed Precipitation Station data (CHIRPS) via chirps R package. Additionally, optional intervals argument specifies set intervals function calculate average ESI previous X number days location.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_esi_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Evaporative Stress Index (ESI) data — get_esi_data","text":"","code":"get_esi_data(lon, lat, dates, intervals = NULL)"},{"path":"https://gilesjohnr.github.io/es/reference/get_esi_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Evaporative Stress Index (ESI) data — get_esi_data","text":"lon numeric vector giving longitude sampling sites Decimal Degrees. lat numeric vector giving latitude sampling sites Decimal Degrees. dates character date vector dates giving date sample collected (format YYYY-MM-DD) intervals integer vector giving set time intervals calculate average ESI. Default NULL interval 0 (returns ESI value time t). intervals=3 average ESI preceding 3 days returned.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_esi_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Evaporative Stress Index (ESI) data — get_esi_data","text":"data.frame","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_esi_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Evaporative Stress Index (ESI) data — get_esi_data","text":"","code":"if (FALSE) {  d <- get_esi_data(lon = c(-54.9857, -52.9857), lat = c(-5.9094, -25.8756), dates = c(\"2020-06-01\", \"2020-10-31\"), intervals = c(5,10,20))  head(d)  ggplot2::ggplot(d, aes(x = date)) +      geom_line(aes(y = esi_daily_avg_20, col='Average ESI 20 days')) +      geom_line(aes(y = esi_daily_avg_10, col='Average ESI 10 days')) +      geom_line(aes(y = esi_daily_avg_5, col='Average ESI 5 days')) +      geom_line(aes(y = esi_daily_avg)) +      facet_grid(rows=vars(id)) +      labs(x=\"\", y = \"Evaporative Stress Index (ESI)\") +      theme_bw() +      theme(legend.position = 'bottom',            legend.title = element_blank())  }"},{"path":"https://gilesjohnr.github.io/es/reference/get_hydro_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get hydrological data — get_hydro_data","title":"Get hydrological data — get_hydro_data","text":"function takes information set environmental samples collected retrieves suite topographical hydrological variables unique location. variables include: elevation, slope, aspect, Topographical Wetness Index (TWI), flow accumulation, total flow accumulation within 500m, distance nearest stream. DEM provided, DEM acquired via elevatr::get_elev_raster suite variables calculated using functions 'WhiteboxTools' R frontend.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_hydro_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get hydrological data — get_hydro_data","text":"","code":"get_hydro_data(lon, lat, path_dem_raster = NULL, path_output)"},{"path":"https://gilesjohnr.github.io/es/reference/get_hydro_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get hydrological data — get_hydro_data","text":"lon numeric vector giving longitude sampling sites Decimal Degrees. lat numeric vector giving latitude sampling sites Decimal Degrees. path_dem_raster file path Digital Elevation Model (DEM) raster. See download_elevation_data methods download DEM raster data. NULL, DEM downloaded automatically using function. path_output file path output directory spatial data saved.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_hydro_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get hydrological data — get_hydro_data","text":"data.frame","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_hydro_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get hydrological data — get_hydro_data","text":"","code":"if (FALSE) {  dir.create(file.path(getwd(), 'tmp'))  get_hydro_data(lon = template_es_data$lon,                lat = template_es_data$lat,                path_dem_raster = file.path(getwd(), 'tmp/dem.tif'),                path_output = file.path(getwd(), 'tmp'))  }"},{"path":"https://gilesjohnr.github.io/es/reference/get_local_population_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get population counts for a local area — get_local_population_data","title":"Get population counts for a local area — get_local_population_data","text":"Get population counts local area","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_local_population_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get population counts for a local area — get_local_population_data","text":"","code":"get_local_population_data(lon, lat, type)"},{"path":"https://gilesjohnr.github.io/es/reference/get_local_population_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get population counts for a local area — get_local_population_data","text":"lon numeric vector giving longitude sampling sites Decimal Degrees. lat numeric vector giving latitude sampling sites Decimal Degrees. type character string giving type local population calculate. Options : 'catchment', 'radius', 'admin'.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_local_population_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get population counts for a local area — get_local_population_data","text":"data.frame","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_local_population_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get population counts for a local area — get_local_population_data","text":"","code":"if (FALSE) {  download_wopr_data(iso3 = 'FRA', output_path = getwd())  }"},{"path":"https://gilesjohnr.github.io/es/reference/get_population_catchment.html","id":null,"dir":"Reference","previous_headings":"","what":"Get population counts within catchments of sampling sites — get_population_catchment","title":"Get population counts within catchments of sampling sites — get_population_catchment","text":"function takes vectors sampling site longitude latitude calculates total population residing within drainage catchment coordinate pair. Raster data giving population counts per grid cell Digital Elevation Model (DEM) required. default, function delineates streams based provided DEM. However, optional shapefile (urban sewer network) can specified using path_stream_shp argument used instead natural stream network calculated DEM. Note delineation catchments along streams (sewer networks) still depends directional flow provided DEM. Intermediate spatial variables written directory specified path_output.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_population_catchment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get population counts within catchments of sampling sites — get_population_catchment","text":"","code":"get_population_catchment(   lon,   lat,   path_pop_raster,   path_dem_raster,   path_stream_shp = NULL,   path_output )"},{"path":"https://gilesjohnr.github.io/es/reference/get_population_catchment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get population counts within catchments of sampling sites — get_population_catchment","text":"lon numeric vector giving longitudes sampling sites Decimal Degrees. lat numeric vector giving latitudes sampling sites Decimal Degrees. path_pop_raster file path raster object providing population counts grid cell. See download_worldpop_data methods download population raster data. path_dem_raster file path Digital Elevation Model (DEM) raster. See download_elevation_data methods download DEM raster data. path_stream_shp optional file path stream sewer network shapefile. NULL (default), streams delineated based flow accumulation provided DEM. path_output file path output directory spatial data saved.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_population_catchment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get population counts within catchments of sampling sites — get_population_catchment","text":"data.frame containing catchment area population counts sampling site.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_population_catchment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get population counts within catchments of sampling sites — get_population_catchment","text":"","code":"if (FALSE) {  dir.create(file.path(getwd(), 'tmp'))  download_worldpop_data(iso3 = 'BGD',                        year = 2020,                        constrained = FALSE,                        UN_adjusted = FALSE,                        path_output = file.path(getwd(), 'tmp'))  download_elevation_data(lon = template_es_data$lon,                         lat = template_es_data$lat,                         path_output = file.path(getwd(), 'tmp'))  get_population_catchment(lon = template_es_data$lon,                          lat = template_es_data$lat,                          path_pop_raster = file.path(getwd(), 'tmp/bgd_ppp_2020.tif'),                          path_dem_raster = file.path(getwd(), 'tmp/dem.tif'),                          path_output = file.path(getwd(), 'tmp'))  }"},{"path":"https://gilesjohnr.github.io/es/reference/get_population_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get population data — get_population_data","title":"Get population data — get_population_data","text":"function takes information set environmental samples collected retrieves suite topographical hydrological variables unique location. variables include: elevation, slope, aspect, Topographical Wetness Index (TWI), flow accumulation, total flow accumulation within 500m, distance nearest stream. DEM acquired via elevatr::get_elev_raster suite variables calculated using functions 'WhiteboxTools' R frontend.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_population_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get population data — get_population_data","text":"","code":"get_population_data(lon, lat, save_data = FALSE)"},{"path":"https://gilesjohnr.github.io/es/reference/get_population_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get population data — get_population_data","text":"lon numeric vector giving longitude sampling sites Decimal Degrees. lat numeric vector giving latitude sampling sites Decimal Degrees. save_data Logical indicating whether save intermediate raster layers used calculate hydrological variables point. Default FALSE temp directory deleted.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_population_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get population data — get_population_data","text":"data.frame","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_population_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get population data — get_population_data","text":"","code":"if (FALSE) {  get_population_data(lon = template_es_data$lon,                     lat = template_es_data$lat,                     save_data = FALSE)  }"},{"path":"https://gilesjohnr.github.io/es/reference/get_population_radius.html","id":null,"dir":"Reference","previous_headings":"","what":"Get population counts within a radius of sampling sites — get_population_radius","title":"Get population counts within a radius of sampling sites — get_population_radius","text":"function takes vectors sampling site longitude latitude calculates total population residing within given radius around sampling site. Intermediate spatial variables written directory specified path_output.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_population_radius.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get population counts within a radius of sampling sites — get_population_radius","text":"","code":"get_population_radius(lon, lat, radius, path_pop_raster, path_output)"},{"path":"https://gilesjohnr.github.io/es/reference/get_population_radius.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get population counts within a radius of sampling sites — get_population_radius","text":"lon numeric vector giving longitudes sampling sites Decimal Degrees. lat numeric vector giving latitudes sampling sites Decimal Degrees. radius Numeric giving radius (meters) around point calculate total population path_pop_raster file path raster object providing population counts grid cell. See download_worldpop_data methods download population raster data. path_output file path output directory spatial data saved.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_population_radius.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get population counts within a radius of sampling sites — get_population_radius","text":"data.frame containing total population counts given radius around sampling site.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_population_radius.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get population counts within a radius of sampling sites — get_population_radius","text":"","code":"if (FALSE) {  dir.create(file.path(getwd(), 'tmp'))  download_worldpop_data(iso3 = 'BGD',                        year = 2020,                        constrained = FALSE,                        UN_adjusted = FALSE,                        path_output = file.path(getwd(), 'tmp'))  get_population_radius(lon = template_es_data$lon,                       lat = template_es_data$lat,                       radius = 100,                       path_pop_raster = file.path(getwd(), 'tmp/bgd_ppp_2020.tif'),                       path_output = file.path(getwd(), 'tmp'))  }"},{"path":"https://gilesjohnr.github.io/es/reference/get_precip_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get precipitation data — get_precip_data","title":"Get precipitation data — get_precip_data","text":"function takes information set environmental samples collected retrieves precipitation data (millimeters) locations times. Data come Open-Meteo Historical Weather API (https://open-meteo.com/en/docs/historical-weather-api) via openmeteo R package. Additionally, optional intervals argument specifies set intervals function calculate cumulative sum precipitation millimeters (mm) previous X number days location.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_precip_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get precipitation data — get_precip_data","text":"","code":"get_precip_data(lon, lat, dates, intervals = NULL)"},{"path":"https://gilesjohnr.github.io/es/reference/get_precip_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get precipitation data — get_precip_data","text":"lon numeric vector giving longitude sampling sites Decimal Degrees. lat numeric vector giving latitude sampling sites Decimal Degrees. dates character date vector dates giving date sample collected (format YYYY-MM-DD) intervals integer vector giving set time intervals sum precipitation data. Default NULL interval 0 (returns precipitation value time t). intervals=3 cumulative precipitation preceding 3 days returned.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_precip_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get precipitation data — get_precip_data","text":"data.frame","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_precip_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get precipitation data — get_precip_data","text":"","code":"if (FALSE) {  d <- get_precip_data(lon = c(-56.0281, -54.9857),                      lat = c(-2.9094, -2.8756),                      dates = c(\"2017-12-01\", \"2017-12-31\"),                      intervals = c(1,3,7))  head(d)  ggplot2::ggplot(d, aes(x = date)) +      geom_line(aes(y = precip_daily_sum_7, col='Cumulative sum 7 days')) +      geom_line(aes(y = precip_daily_sum_3, col='Cumulative sum 3 days')) +      geom_line(aes(y = precip_daily_sum_1, col='Cumulative sum 1 day')) +      geom_line(aes(y = precip_daily_sum)) +      facet_grid(rows=vars(id)) +      labs(x=\"\", y = \"Precipitation (mm)\") +      theme_bw() +      theme(legend.position = 'bottom',            legend.title = element_blank())  }"},{"path":"https://gilesjohnr.github.io/es/reference/get_river_discharge_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get river discharge data — get_river_discharge_data","title":"Get river discharge data — get_river_discharge_data","text":"function takes information set environmental samples collected retrieves daily river discharge data nearest river (\\(m^3/s\\)) locations times. Data come Open-Meteo Global Flood API (https://open-meteo.com/en/docs/flood-api) via openmeteo R package.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_river_discharge_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get river discharge data — get_river_discharge_data","text":"","code":"get_river_discharge_data(lon, lat, dates)"},{"path":"https://gilesjohnr.github.io/es/reference/get_river_discharge_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get river discharge data — get_river_discharge_data","text":"lon numeric vector giving longitude sampling sites Decimal Degrees. lat numeric vector giving latitude sampling sites Decimal Degrees. dates character date vector dates giving date sample collected (format YYYY-MM-DD)","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_river_discharge_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get river discharge data — get_river_discharge_data","text":"data.frame","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_river_discharge_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get river discharge data — get_river_discharge_data","text":"","code":"if (FALSE) {  d <- get_river_discharge_data(lon = c(-54.9857, -52.9857),                               lat = c(-10.9094, -25.8756),                               dates = c(\"2020-06-01\", \"2020-10-31\"))  head(d)  ggplot2::ggplot(d, aes(x = date)) +      geom_line(aes(y = daily_river_discharge)) +      facet_grid(rows=vars(id)) +      labs(x=\"\", y = \"Local River Discharge (m^3/s)\") +      theme_bw() +      theme(legend.position = 'bottom',            legend.title = element_blank())  }"},{"path":"https://gilesjohnr.github.io/es/reference/get_temp_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get temperature data — get_temp_data","title":"Get temperature data — get_temp_data","text":"function takes information set environmental samples collected retrieves temperature data (measured accumulated degree-days) locations times. Data come Open-Meteo Historical Weather API (https://open-meteo.com/en/docs/historical-weather-api) via openmeteo R package. optional intervals argument specifies set intervals function calculate accumulated temperature form Accumulated Thermal Units (ATUs) interval.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_temp_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get temperature data — get_temp_data","text":"","code":"get_temp_data(lon, lat, dates, intervals = NULL)"},{"path":"https://gilesjohnr.github.io/es/reference/get_temp_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get temperature data — get_temp_data","text":"lon numeric vector giving longitude sampling sites Decimal Degrees. lat numeric vector giving latitude sampling sites Decimal Degrees. dates character date vector dates giving date sample collected (format YYYY-MM-DD) intervals integer vector giving set time intervals calculate accumulated degree-days. Default NULL interval 0 (returns daily temperature degrees Celsius time t). intervals=3 accumulated degree-days preceding 3 days returned.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_temp_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get temperature data — get_temp_data","text":"data.frame","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_temp_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get temperature data — get_temp_data","text":"","code":"if (FALSE) {  d <- get_temp_data(lon = c(30.0281, -52.9857), lat = c(15.9094, -25.8756), dates = c(\"2020-08-01\", \"2020-12-31\"), intervals = c(1,5,10))  head(d)  ggplot2::ggplot(d, aes(x = date)) +      geom_line(aes(y = temp_daily_atu_10, col='Accumulated temperature 10 days')) +      geom_line(aes(y = temp_daily_atu_5, col='Accumulated temperature 5 days')) +      geom_line(aes(y = temp_daily_atu_1, col='Accumulated temperature 1 day')) +      geom_line(aes(y = temp_daily_atu)) +      facet_grid(rows=vars(id)) +      labs(x=\"\", y = \"Accumulated Thermal Units (ATUs)\") +      theme_bw() +      theme(legend.position = 'bottom',            legend.title = element_blank())  }"},{"path":"https://gilesjohnr.github.io/es/reference/get_topo_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get topographical data — get_topo_data","title":"Get topographical data — get_topo_data","text":"function takes information set environmental samples collected retrieves 100m elevation raster around locations calculates slope aspect point. DEM acquired via elevatr::get_elev_raster topographical variables calculated using raster::terrain.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_topo_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get topographical data — get_topo_data","text":"","code":"get_topo_data(lon, lat, show_plots = FALSE)"},{"path":"https://gilesjohnr.github.io/es/reference/get_topo_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get topographical data — get_topo_data","text":"lon numeric vector giving longitude sampling sites Decimal Degrees. lat numeric vector giving latitude sampling sites Decimal Degrees. show_plots Logical indicating whether plot raster point data.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_topo_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get topographical data — get_topo_data","text":"data.frame","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_topo_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get topographical data — get_topo_data","text":"","code":"if (FALSE) {  get_topo_data(lon = template_es_data$lon,               lat = template_es_data$lat,               show_plots = TRUE)  }"},{"path":"https://gilesjohnr.github.io/es/reference/logmean.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the mean in log space — logmean","title":"Calculate the mean in log space — logmean","text":"function gives mean taken log-scale set numeric values. Values less equal zero ignored NA. Best suited values taken highly skewed distribution, Ct values often .","code":""},{"path":"https://gilesjohnr.github.io/es/reference/logmean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the mean in log space — logmean","text":"","code":"logmean(x)"},{"path":"https://gilesjohnr.github.io/es/reference/logmean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the mean in log space — logmean","text":"x vector containing numeric values","code":""},{"path":"https://gilesjohnr.github.io/es/reference/logmean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the mean in log space — logmean","text":"Scalar","code":""},{"path":"https://gilesjohnr.github.io/es/reference/logmean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the mean in log space — logmean","text":"","code":"if (FALSE) {  logmean(c(24.3, 10.3, 40, NA, 0, -1, 0.05))  }"},{"path":"https://gilesjohnr.github.io/es/reference/query_wopr_api.html","id":null,"dir":"Reference","previous_headings":"","what":"Query the WorldPop REST API — query_wopr_api","title":"Query the WorldPop REST API — query_wopr_api","text":"function queries WorldPop REST API population raster metadata associated particular ISO country code. ISO country code provided, function returns metadata available ISO codes WorldPop API.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/query_wopr_api.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query the WorldPop REST API — query_wopr_api","text":"","code":"query_wopr_api(iso3)"},{"path":"https://gilesjohnr.github.io/es/reference/query_wopr_api.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query the WorldPop REST API — query_wopr_api","text":"iso3 three-letter capitalized character string. Must follow ISO-3166 Alpha-3 country code standard (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3).","code":""},{"path":"https://gilesjohnr.github.io/es/reference/query_wopr_api.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query the WorldPop REST API — query_wopr_api","text":"list","code":""},{"path":"https://gilesjohnr.github.io/es/reference/query_wopr_api.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query the WorldPop REST API — query_wopr_api","text":"","code":"if (FALSE) {  query_wopr_api('USA') query_wopr_api(NULL)  }"},{"path":"https://gilesjohnr.github.io/es/reference/template_es_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Template environmental sampling data — template_es_data","title":"Template environmental sampling data — template_es_data","text":"template_es_data object provides template data format required es package.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/template_es_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Template environmental sampling data — template_es_data","text":"","code":"template_es_data"},{"path":[]},{"path":"https://gilesjohnr.github.io/es/reference/template_es_data.html","id":"template-es-data","dir":"Reference","previous_headings":"","what":"template_es_data","title":"Template environmental sampling data — template_es_data","text":"data frame 6 columns: date date sample collected. Formate \"YYYY-MM-DD\". location_id unique identifier sampling locations. lat lattitude sampling location decimal degrees. lon longitude sampling location decimal degrees. target_name unique name gene target Ct values correspond. ct_value Cycle Threshold (Ct) qPCR assay.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/template_standard_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Template standard curve data — template_standard_curve","title":"Template standard curve data — template_standard_curve","text":"template_standard_curve object provides template data format required es package standard curve values. data required calculating number gene copies using calc_n_copies function.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/template_standard_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Template standard curve data — template_standard_curve","text":"","code":"template_standard_curve"},{"path":[]},{"path":"https://gilesjohnr.github.io/es/reference/template_standard_curve.html","id":"template-standard-curve","dir":"Reference","previous_headings":"","what":"template_standard_curve","title":"Template standard curve data — template_standard_curve","text":"data frame 3 columns: target_name unique name gene target Ct values correspond. n_copies number gene copies represented particular dilution. ct_value Cycle Threshold (Ct) qPCR assay.","code":""}]
