[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"John R Giles. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Giles J (2024). es: Tools analyzing environmental sampling data. R package version 0.0.1, https://gilesjohnr.github.io/es/, https://github.com/gilesjohnr/es.","code":"@Manual{,   title = {es: Tools for analyzing environmental sampling data},   author = {John R Giles},   year = {2024},   note = {R package version 0.0.1, https://gilesjohnr.github.io/es/},   url = {https://github.com/gilesjohnr/es}, }"},{"path":"/index.html","id":"es-an-r-package-for-analyzing-environmental-sampling-data","dir":"","previous_headings":"","what":"Tools for analyzing environmental sampling data","title":"Tools for analyzing environmental sampling data","text":"package provides reproducible functions parsing compiling data sets measure infectious disease burden using Environmental Sampling (ES) methods. tools developed specifically epidemiological surveillance studies multiple pathogens locations Dhaka, Bangladesh Karachi, Pakistan. However, functions generalize applications provided use data formats. package currently development maintained John Giles (@gilesjohnr), details data models .","code":""},{"path":"/index.html","id":"required-data","dir":"","previous_headings":"","what":"Required data","title":"Tools for analyzing environmental sampling data","text":"tools intended heavy lifting combining data multiple sources calculating relevant quantities. However, use must start putting data following standard format: viral load calculations, information standard curves also required:","code":""},{"path":"/index.html","id":"methods","dir":"","previous_headings":"","what":"Methods","title":"Tools for analyzing environmental sampling data","text":"package also includes methods calculating basic quantities qPCR data : Viral load Delta delta Ct Metadata: Climate variables Topography Catchement population sizes Summary sampling statistics Cross correlations Timeseries models","code":""},{"path":"/index.html","id":"visualization","dir":"","previous_headings":"","what":"Visualization","title":"Tools for analyzing environmental sampling data","text":"package launches Rshiny app blah blah","code":""},{"path":"/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Tools for analyzing environmental sampling data","text":"full demo package please see vignettes located .","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for analyzing environmental sampling data","text":"Use devtools package install development version es GitHub repository. R version >= 3.5.0 recommended.","code":"install.packages('devtools') devtools::install_github(\"gilesjohnr/es\", dependencies=TRUE)"},{"path":"/index.html","id":"troubleshooting","dir":"","previous_headings":"","what":"Troubleshooting","title":"Tools for analyzing environmental sampling data","text":"general questions, contact John Giles (john.giles@gatesfoundation.org) /Jillian Gauld (jillian.gauld@gatesfoundation.org). Note software made available Creative Commons license developed specific environmental sampling applications therefore may generalize perfectly settings.","code":""},{"path":"/index.html","id":"funding","dir":"","previous_headings":"","what":"Funding","title":"Tools for analyzing environmental sampling data","text":"work developed Institute Disease Modeling support funded research grants made Bill & Melinda Gates Foundation.","code":""},{"path":"/reference/apply_delta_delta_ct.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply the delta delta Ct calculation to a data.frame — apply_delta_delta_ct","title":"Apply the delta delta Ct calculation to a data.frame — apply_delta_delta_ct","text":"function calculate delta delta Ct metric applicable observations data.frame applying calc_delta_delta_ct function. data.frame must following columns: 'location_id', 'sample_date', 'target_name', 'ct_value'. relevant target_names associated reference_names must provided. result data.frame containing 'delta_delta_ct' column can merge source data.frame.","code":""},{"path":"/reference/apply_delta_delta_ct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply the delta delta Ct calculation to a data.frame — apply_delta_delta_ct","text":"","code":"apply_delta_delta_ct(   df,   target_names,   reference_names,   amplification_efficiency = 1 )"},{"path":"/reference/apply_delta_delta_ct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply the delta delta Ct calculation to a data.frame — apply_delta_delta_ct","text":"df data.frame class esdata. target_names Character vector giving names target genes. reference_names Character vector giving names reference genes associated target gene. amplification_efficiency scalar 0 1 giving assumed PCR amplification efficiency samples equation. Defaults 1, assumes 100% efficiency.","code":""},{"path":"/reference/apply_delta_delta_ct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply the delta delta Ct calculation to a data.frame — apply_delta_delta_ct","text":"data.frame","code":""},{"path":"/reference/apply_delta_delta_ct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply the delta delta Ct calculation to a data.frame — apply_delta_delta_ct","text":"","code":"if (FALSE) {  df_example <- data.frame(location_id = c(rep(1,9), rep(2,9), rep(3,9)),                          sample_date = as.Date(rep(c(rep('2024-01-01',3), rep('2024-01-02',3), rep('2024-01-03',3)), 3)),                          target_name = rep(c('gene1', 'gene2', 'housekeeping'), 9),                          ct_value = as.numeric(runif(27, min=5, max=40)))  df_result <- apply_delta_delta_ct(df = df_example,                                   target_names = c('gene1', 'gene2'),                                   reference_names = c('housekeeping', 'housekeeping'),                                   amplification_efficiency = 0.95)  merge(df_example, df_result, by=c('location_id', 'sample_date', 'target_name'), all.x=TRUE)  }"},{"path":"/reference/calc_delta_delta_ct.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate delta delta Ct — calc_delta_delta_ct","title":"Calculate delta delta Ct — calc_delta_delta_ct","text":"function calculates relative gene expression using delta delta Ct method described https://www.sciencedirect.com/science/article/abs/pii/S1046202301912629?via%3DihubLivak & Schmittgen (2001).","code":""},{"path":"/reference/calc_delta_delta_ct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate delta delta Ct — calc_delta_delta_ct","text":"","code":"calc_delta_delta_ct(   ct_target_t,   ct_reference_t,   ct_target_t0,   ct_reference_t0,   amplification_efficiency = 1 )"},{"path":"/reference/calc_delta_delta_ct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate delta delta Ct — calc_delta_delta_ct","text":"ct_target_t scalar providing Ct value target gene observation time t ct_reference_t scalar providing Ct value reference gene observation time t ct_target_t0 scalar providing Ct value target gene reference observation time t=0 ct_reference_t0 scalar providing Ct value reference gene reference observation time t=0 amplification_efficiency scalar 0 1 giving assumed PCR amplification efficiency samples equation. Defaults 1, assumes 100% efficiency.","code":""},{"path":"/reference/calc_delta_delta_ct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate delta delta Ct — calc_delta_delta_ct","text":"Scalar","code":""},{"path":"/reference/calc_delta_delta_ct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate delta delta Ct — calc_delta_delta_ct","text":"","code":"if (FALSE) {  calc_delta_delta_ct(ct_target_t = 32.5,                     ct_reference_t = 25,                     ct_target_t0 = 34,                     ct_reference_t0 = 30,                     amplification_efficiency = 0.95)  }"},{"path":"/reference/calc_n_copies.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate number of target copies — calc_n_copies","title":"Calculate number of target copies — calc_n_copies","text":"function calculates quantitative value qPCR Ct value. Cycle threshold converted estimated number gene target copies (e.g. viral load viral pathogen) fitting log linear model standard curve data using model find point estimate provided Ct values.","code":""},{"path":"/reference/calc_n_copies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate number of target copies — calc_n_copies","text":"","code":"calc_n_copies(ct_values, target_names, standard_curves)"},{"path":"/reference/calc_n_copies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate number of target copies — calc_n_copies","text":"ct_values numeric vector giving Ct value observation. target_names character vector giving target names element 'ct_values'. standard_curves data.frame containing results standard curve dilution experiment. Elements 'target_names' must map either 'target_name_unique' 'target_name_concise'. See package data object standard_curves_dhaka template.","code":""},{"path":"/reference/calc_n_copies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate number of target copies — calc_n_copies","text":"Vector","code":""},{"path":"/reference/calc_n_copies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate number of target copies — calc_n_copies","text":"","code":"if (FALSE) {  compiled_tac <- read.csv('/Users/tac/compiled_tac.csv')  test <- calc_n_copies(ct_values = compiled_tac$ct_value,                       target_names = compiled_tac$target_name,                       standard_curves = standard_curves_dhaka)  compiled_tac$n_copies <- test  }"},{"path":"/reference/calc_sample_sizes.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate sample sizes — calc_sample_sizes","title":"Calculate sample sizes — calc_sample_sizes","text":"function takes compiled data.frame compile_tac_data calculates basic sample sizes targets.","code":""},{"path":"/reference/calc_sample_sizes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate sample sizes — calc_sample_sizes","text":"","code":"calc_sample_sizes(d)"},{"path":"/reference/calc_sample_sizes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate sample sizes — calc_sample_sizes","text":"d data.frame produced compile_tac_data function containing 'target_name' 'ct_value' columns.","code":""},{"path":"/reference/calc_sample_sizes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate sample sizes — calc_sample_sizes","text":"data.frame","code":""},{"path":"/reference/calc_sample_sizes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate sample sizes — calc_sample_sizes","text":"","code":"if (FALSE) {  compiled_tac <- read.csv('/Users/tac/compiled_tac.csv') calc_sample_sizes(compiled_tac)  }"},{"path":"/reference/dot-init_pb.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a progress bar — .init_pb","title":"Initialize a progress bar — .init_pb","text":"wrapper function 'progress' package initialize default progress bar long loops","code":""},{"path":"/reference/dot-init_pb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a progress bar — .init_pb","text":"","code":".init_pb(x)"},{"path":"/reference/dot-init_pb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a progress bar — .init_pb","text":"x Integer giving length loop","code":""},{"path":"/reference/dot-init_pb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize a progress bar — .init_pb","text":"","code":"if (FALSE) {      len <- 100      pb <- .init_pb(len)      for (i in 1:len) {           pb$tick()           Sys.sleep(0.01)           } }"}]
