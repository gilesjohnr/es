[{"path":"https://gilesjohnr.github.io/es/articles/amplification_efficiency.html","id":"estimation-of-amplification-efficiency-using-the-standard-curve-method","dir":"Articles","previous_headings":"","what":"Estimation of amplification efficiency using the standard curve method","title":"Estimating the amplification efficiency of qPCR","text":"included two functions (est_amplification_efficiency() apply_amplification_efficiency()) assist efficiency calculations. functions use standard curve method estimate percentile amplification efficiency target provided standard curve data (Yuan, Wang, Stewart 2008; Yuan et al. 2006). Note data must standardized format described template_standard_curve data object. estimate percentile amplification efficiency \\(\\phi\\), fit following linear model get slope \\(\\beta_{\\text{efficiency}}\\): \\[\\text{Ct}_{ij} = \\alpha + \\beta_{\\text{efficiency}} \\text{log}_2\\big(S_{ij}\\big) + \\epsilon.\\] \\(S_{ij}\\) serially diluted concentration target nucleic acid observation \\(\\) gene target \\(j\\), percentile amplification efficiency \\(\\phi = -\\beta_{\\text{efficiency}}\\). Assuming standard curve assay contains greater 5 observations target concentrations double serial dilution, expect \\(\\phi = 1\\) case perfect efficiency \\(\\phi < 1\\) otherwise. following code estimate \\(\\phi\\) 95% confidence intervals single target using est_amplification_efficiency(): apply_amplification_efficiency() apply function gene targets within data frame following format template_standard_curve data object:","code":"sel <- template_standard_curve$target_name == 'target_1' tmp_n_copies <- template_standard_curve$n_copies[sel] tmp_ct_value <- template_standard_curve$ct_value[sel]  est_amplification_efficiency(n_copies = tmp_n_copies,                              ct_value = tmp_ct_value)  $mean [1] 0.956834  $ci_lo [1] 1.409495  $ci_hi [1] 0.5041726 apply_amplification_efficiency(template_standard_curve)    target_name     mean    ci_lo     ci_hi 1    target_0 1.098055 1.461838 0.7342719 2    target_1 0.956834 1.409495 0.5041726 3    target_2 1.280836 1.886246 0.6754255 4    target_3 1.099861 1.562983 0.6367384"},{"path":[]},{"path":"https://gilesjohnr.github.io/es/articles/calc_hydro_variables.html","id":"download-spatial-data","dir":"Articles","previous_headings":"","what":"Download spatial data","title":"Calculating hydrological variables","text":"Digital Elevation Model (DEM) downloaded ‘tmp’ directory.","code":"library(es) library(sp) library(sf) library(raster) library(ggplot2) library(ggrepel) # Get data frame of simulated environmental sampling data df <- es::template_es_data head(df)  date location_id  lat   lon target_name ct_value 1 2020-03-07           1 23.8 90.37    target_0       NA 2 2020-03-07           1 23.8 90.37    target_0       NA 3 2020-03-07           1 23.8 90.37    target_0       NA 4 2020-03-07           1 23.8 90.37    target_0 29.95670 5 2020-03-07           1 23.8 90.37    target_1 31.60111 6 2020-03-07           1 23.8 90.37    target_1 32.20208  # Create a directory to download spatial data and save intermediate output dir.create(file.path(getwd(), 'tmp'))  # Download a DEM for the area surrounding sampling sites download_elevation_data(lon = df$lon,                         lat = df$lat,                         path_output = file.path(getwd(), 'tmp'))"},{"path":"https://gilesjohnr.github.io/es/articles/calc_hydro_variables.html","id":"calculate-hydrological-variables","dir":"Articles","previous_headings":"","what":"Calculate hydrological variables","title":"Calculating hydrological variables","text":"intermediate spatial data produced calculation topographical hydrological variables also saved ‘tmp’ output directory.","code":"# Calculate topographical and hydrological variables for each sampling site hydro <- es::get_hydro_data(      lon = template_es_data$lon,      lat = template_es_data$lat,      path_dem_raster = file.path(getwd(), 'tmp/dem.tif'),      path_output = file.path(getwd(), 'tmp') )  hydro  lon   lat elevation slope aspect  twi flow_acc flow_acc_500m km_to_nearest_stream 1 90.37 23.80        12  0.97  90.00 4.77     2.00       5014.22                 2.19 2 90.38 23.80        11  0.98 262.55 7.45    29.59       2706.60                 1.25 3 90.37 23.81        20  1.79 157.20 3.46     1.00       2684.25                 1.92  # Merge with environmental sampling data result <- merge(df, hydro, by=c('lon', 'lat'), all.x=T) head(result)  lon  lat       date location_id target_name ct_value elevation slope aspect  twi flow_acc flow_acc_500m km_to_nearest_stream 1 90.37 23.8 2020-03-07           1    target_0       NA        12  0.97     90 4.77        2       5014.22                 2.19 2 90.37 23.8 2020-03-07           1    target_0       NA        12  0.97     90 4.77        2       5014.22                 2.19 3 90.37 23.8 2020-03-07           1    target_0       NA        12  0.97     90 4.77        2       5014.22                 2.19 4 90.37 23.8 2020-03-07           1    target_0 29.95670        12  0.97     90 4.77        2       5014.22                 2.19 5 90.37 23.8 2020-03-07           1    target_1 31.60111        12  0.97     90 4.77        2       5014.22                 2.19 6 90.37 23.8 2020-03-07           1    target_1 32.20208        12  0.97     90 4.77        2       5014.22                 2.19"},{"path":"https://gilesjohnr.github.io/es/articles/calc_hydro_variables.html","id":"plot-results","dir":"Articles","previous_headings":"","what":"Plot results","title":"Calculating hydrological variables","text":"output data can used analysis visualization. example plot local population calculations shown .","code":"out_path <- file.path(getwd(), 'tmp') rast_dem <- raster::raster(file.path(out_path, 'dem.tif')) rast_slp <- raster::raster(file.path(out_path, 'slope.tif')) rast_asp <- raster::raster(file.path(out_path, 'aspect.tif')) rast_twi <- raster::raster(file.path(out_path, 'twi.tif')) rast_acc <- raster::raster(file.path(out_path, 'flow_acc.tif')) rast_hill <- raster::raster(file.path(out_path, 'hillshade.tif')) shp_streams <- sf::st_read(file.path(out_path, 'streams.shp'), quiet=TRUE)  pts <- sp::SpatialPoints(data.frame(x=hydro$lon, y=hydro$lat), proj4string=CRS(\"+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs\")) pts_buff_500 <- raster::buffer(pts, 500)   plot_base <-      ggplot2::ggplot() +      ggrepel::geom_label_repel(box.padding   = 0.5,                                point.padding = 0.5,                                segment.color = 'black',                                segment.size = 0.25) +      scale_fill_viridis_c(na.value='white') +      coord_equal() +      theme_void() +      theme(plot.title = element_text(hjust = 0.5),            legend.position='right',            legend.title = element_blank(),            legend.key.height=unit(40,'pt'),            legend.key.width=unit(5,'pt'))   tmp <- as.data.frame(rast_dem, xy=TRUE) colnames(tmp)[3] <- 'DEM'  plot_dem <-      plot_base +      geom_raster(data=tmp, aes(x=x, y=y, fill=DEM)) +      geom_point(data=hydro, aes(x=lon, y=lat), pch=1, size=3) +      ggrepel::geom_label_repel(data=hydro, aes(x=lon, y=lat, label=elevation)) +      ggplot2::ggtitle('DEM')   tmp <- as.data.frame(rast_slp, xy=TRUE) colnames(tmp)[3] <- 'slope'  plot_slope <-      plot_base +      geom_raster(data=tmp, aes(x=x, y=y, fill=slope)) +      geom_point(data=hydro, aes(x=lon, y=lat), pch=1, size=3) +      ggrepel::geom_label_repel(data=hydro, aes(x=lon, y=lat, label=slope)) +      ggplot2::ggtitle('Slope')   tmp <- as.data.frame(rast_asp, xy=TRUE) colnames(tmp)[3] <- 'aspect'  plot_aspect <-      plot_base +      geom_raster(data=tmp, aes(x=x, y=y, fill=aspect)) +      geom_point(data=hydro, aes(x=lon, y=lat), pch=1, size=3) +      ggrepel::geom_label_repel(data=hydro, aes(x=lon, y=lat, label=aspect)) +      ggplot2::ggtitle('Aspect')   tmp <- raster::as.data.frame(rast_twi, xy=TRUE) colnames(tmp)[3] <- 'twi'  plot_twi <-      plot_base +      geom_raster(data=tmp, aes(x=x, y=y, fill=twi)) +      geom_point(data=hydro, aes(x=lon, y=lat), pch=1, size=3) +      ggrepel::geom_label_repel(data=hydro, aes(x=lon, y=lat, label=twi)) +      ggplot2::ggtitle('Topographic\\n Wetness Index (TWI)')   tmp <- raster::as.data.frame(rast_acc, xy=TRUE) colnames(tmp)[3] <- 'flow_acc_100m'  plot_acc_500m <-      plot_base +      geom_raster(data=tmp, aes(x=x, y=y, fill=flow_acc_100m)) +      geom_point(data=hydro, aes(x=lon, y=lat), pch=1, size=3) +      geom_sf(data=st_as_sf(pts_buff_500), colour = \"red\", fill = NA) +      ggrepel::geom_label_repel(data=hydro, aes(x=lon, y=lat, label=flow_acc_500m)) +      ggplot2::ggtitle('Total flow accumulation\\n (within 500m)')   tmp <- raster::as.data.frame(rast_hill, xy=TRUE) colnames(tmp)[3] <- 'hillshade'  plot_streams <-      plot_base +      geom_raster(data=tmp, aes(x=x, y=y, fill=hillshade)) +      scale_fill_gradient2(low = \"black\", high = \"grey80\") +      geom_sf(data=st_as_sf(shp_streams), colour = \"blue\", fill = 'blue') +      geom_point(data=hydro, aes(x=lon, y=lat), pch=1, size=3) +      ggrepel::geom_label_repel(data=hydro, aes(x=lon, y=lat, label=km_to_nearest_stream)) +      ggplot2::ggtitle('Distance to nearest\\n stream (km)')   gridExtra::grid.arrange(plot_dem, plot_slope, plot_aspect,                         plot_twi, plot_acc_500m, plot_streams,                         ncol=3)"},{"path":"https://gilesjohnr.github.io/es/articles/calc_local_population.html","id":"download-spatial-data","dir":"Articles","previous_headings":"","what":"Download spatial data","title":"Calculating local population size","text":"Population Digital Elevation Model (DEM) downloaded ‘tmp’ directory.","code":"library(es) library(sp) library(sf) library(raster) library(ggplot2) library(ggrepel) # Get data frame of simulated environmental sampling data df <- es::template_es_data head(df)  date location_id  lat   lon target_name ct_value 1 2020-03-07           1 23.8 90.37    target_0       NA 2 2020-03-07           1 23.8 90.37    target_0       NA 3 2020-03-07           1 23.8 90.37    target_0       NA 4 2020-03-07           1 23.8 90.37    target_0 29.95670 5 2020-03-07           1 23.8 90.37    target_1 31.60111 6 2020-03-07           1 23.8 90.37    target_1 32.20208  # Create a directory to download spatial data and save intermediate output dir.create(file.path(getwd(), 'tmp'))  # Download population raster data from Worldpop es::download_worldpop_data(      iso3 = 'BGD',      year = 2020,      constrained = FALSE,      UN_adjusted = FALSE,      path_output = file.path(getwd(), 'tmp') )  # Download a DEM for the area surrounding sampling sites es::download_elevation_data(      lon = df$lon,      lat = df$lat,      path_output = file.path(getwd(), 'tmp') )"},{"path":"https://gilesjohnr.github.io/es/articles/calc_local_population.html","id":"calculate-local-population","dir":"Articles","previous_headings":"","what":"Calculate local population","title":"Calculating local population size","text":"intermediate spatial data produced delineation drainage catchments calculation population size also saved ‘tmp’ output directory.","code":"# Delineate drainage catchments and calculate the population size within them pop_catchment <- es::get_population_catchment(      lon = df$lon,      lat = df$lat,      path_pop_raster = file.path(getwd(), 'tmp/bgd_ppp_2020.tif'),      path_dem_raster = file.path(getwd(), 'tmp/dem.tif'),      path_stream_shp = NULL,      path_output = file.path(getwd(), 'tmp') )  pop_catchment  lon   lat catchment_area_km2 population_catchment 1 90.37 23.80              712.2                69635 2 90.38 23.80               31.0                 2834 3 90.37 23.81                5.2                  279  pop_radius <- es::get_population_radius(      lon = df$lon,      lat = df$lat,      radius = 300,      path_pop_raster = file.path(getwd(), 'tmp/bgd_ppp_2020.tif'),      path_output = file.path(getwd(), 'tmp') )  pop_radius      lon   lat population_radius_300 1 90.37 23.80                 62868 2 90.38 23.80                 38588 3 90.37 23.81                 21450  # Merge with environmental sampling data result <- merge(df, pop_catchment, by=c('lon', 'lat'), all.x=T) result <- merge(result, pop_radius, by=c('lon', 'lat'), all.x=T) head(result)      lon  lat       date location_id target_name ct_value catchment_area_km2 population_catchment population_radius_300 1 90.37 23.8 2020-03-07           1    target_0       NA              712.2                69635                 62868 2 90.37 23.8 2020-03-07           1    target_0       NA              712.2                69635                 62868 3 90.37 23.8 2020-03-07           1    target_0       NA              712.2                69635                 62868 4 90.37 23.8 2020-03-07           1    target_0 29.95670              712.2                69635                 62868 5 90.37 23.8 2020-03-07           1    target_1 31.60111              712.2                69635                 62868 6 90.37 23.8 2020-03-07           1    target_1 32.20208              712.2                69635                 62868"},{"path":"https://gilesjohnr.github.io/es/articles/calc_local_population.html","id":"plot-results","dir":"Articles","previous_headings":"","what":"Plot results","title":"Calculating local population size","text":"output data can used analysis visualization. example plot local population calculations shown .","code":"pts <- sp::SpatialPoints(data.frame(x=pop_catchment$lon, y=pop_catchment$lat), proj4string=sp::CRS(\"+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs\"))  rast_dem <- raster::raster(file.path(getwd(), 'tmp/dem.tif')) rast_pop <- raster::raster(file.path(getwd(), 'tmp/bgd_ppp_2020_crop.tif'))  shp_streams <- sf::st_read(file.path(getwd(), 'tmp/streams.shp'), quiet=TRUE, crs = \"+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs\") shp_catchments <- sf::st_read(file.path(getwd(), 'tmp/catchments.shp'), quiet=TRUE) shp_radius <- sf::st_read(file.path(getwd(), 'tmp/points_buffer_300.shp'), quiet=TRUE)   tmp <- raster::as.data.frame(rast_dem, xy=TRUE) colnames(tmp)[3] <- 'dem'  plot_catchment <-      ggplot2::ggplot() +      geom_raster(data=tmp, aes(x=x, y=y, fill=dem)) +      geom_sf(data=sf::st_as_sf(shp_streams), colour = \"dodgerblue\", fill = NA) +      geom_sf(data=sf::st_as_sf(shp_catchments), colour = \"green\", fill = NA) +      geom_point(data=pop_catchment, aes(x=lon, y=lat), pch=3, size=2, color='red') +      ggrepel::geom_label_repel(data=pop_catchment, aes(x=lon, y=lat, label=catchment_area_km2)) +      ggplot2::ggtitle('Catchment size (sq km)') +      ggrepel::geom_label_repel(box.padding   = 0.5,                                point.padding = 0.5,                                segment.color = 'black',                                segment.size = 0.25) +      scale_fill_gradient(low=\"black\", high=\"white\") +      coord_sf() +      theme_void() +      theme(plot.title = element_text(hjust = 0.5),            legend.position='right',            legend.title = element_blank(),            legend.key.height=unit(40,'pt'),            legend.key.width=unit(5,'pt'))     tmp <- raster::as.data.frame(rast_pop, xy=TRUE) colnames(tmp)[3] <- 'pop'  plot_catchment_pop <-      ggplot2::ggplot() +      geom_raster(data=tmp, aes(x=x, y=y, fill=pop)) +      geom_sf(data=sf::st_as_sf(shp_catchments), colour = \"green\", fill = NA) +      geom_point(data=pop_catchment, aes(x=lon, y=lat), pch=3, size=2, color='red') +      ggrepel::geom_label_repel(data=pop_catchment, aes(x=lon, y=lat, label=population_catchment)) +      ggplot2::ggtitle('Population within catchment') +      ggrepel::geom_label_repel(box.padding   = 0.5,                                point.padding = 0.5,                                segment.color = 'black',                                segment.size = 0.25) +      scale_fill_viridis_c(na.value='white', option='rocket') +      coord_sf() +      theme_void() +      theme(plot.title = element_text(hjust = 0.5),            legend.position='right',            legend.title = element_blank(),            legend.key.height=unit(40,'pt'),            legend.key.width=unit(5,'pt'))   tmp <- raster::as.data.frame(rast_pop, xy=TRUE) colnames(tmp)[3] <- 'pop'  plot_radius_pop <-      ggplot2::ggplot() +      geom_raster(data=tmp, aes(x=x, y=y, fill=pop)) +      geom_sf(data=sf::st_as_sf(shp_radius), colour = \"green\", fill = NA) +      geom_point(data=pop_catchment, aes(x=lon, y=lat), pch=3, size=2, color='red') +      ggrepel::geom_label_repel(data=pop_radius, aes(x=lon, y=lat, label=population_radius_300)) +      ggplot2::ggtitle('Population within radius (300m)') +      ggrepel::geom_label_repel(box.padding   = 0.5,                                point.padding = 0.5,                                segment.color = 'black',                                segment.size = 0.25) +      scale_fill_viridis_c(na.value='white', option='rocket') +      coord_sf() +      theme_void() +      theme(plot.title = element_text(hjust = 0.5),            legend.position='right',            legend.title = element_blank(),            legend.key.height=unit(40,'pt'),            legend.key.width=unit(5,'pt'))   gridExtra::grid.arrange(plot_catchment, plot_catchment_pop, plot_radius_pop, ncol=3)"},{"path":"https://gilesjohnr.github.io/es/articles/derivative_quantities.html","id":"absolute-quantification-calculating-the-number-of-target-gene-copies","dir":"Articles","previous_headings":"","what":"Absolute quantification: calculating the number of target gene copies","title":"Deriving variables from Ct values","text":"Calculating number target gene copies sample form absolute quantification. still susceptible external confounders influence starting amount nucleic acid inhibitors amplification might present (Bustin et al. 2005), count variable interpretable raw Ct values allows normalization additional covariates. calculate number target gene copies, standard curve assay required relates known concentrations gene target expected Ct values specific target, PCR machine, reagents used (Pfaffl 2012). Assuming PCR machine’s amplification efficiency 100%, number gene copies expected double cycle (Ruijter et al. 2009) resulting logarithmic relationship Ct values gene copies, number target gene copies decreases exponentially number PCR cycles increases linearly. Due logarithmic relationship PCR kinetics, use log-linear model relate known gene target quantities standard curve Ct values observed qPCR performed study samples: \\[ \\log(\\text{number gene copies}_i) \\sim \\alpha + \\beta_i \\cdot \\text{Ct value}_i + \\epsilon. \\] code shows use calc_n_copies() function template_es_data template_standard_curve objects calculate number target gene copies. Note prediction number target gene copies shown convenient interpretable Ct value method, however, absolute quantification method may need normalization adjust environmental confounders. alternative use relative quantification method \\(\\Delta \\Delta \\text{Ct}\\) described following section.","code":"df <- es::template_es_data head(df)  date location_id  lat   lon target_name ct_value 1 2020-03-07           1 23.8 90.37    target_0       NA 2 2020-03-07           1 23.8 90.37    target_0       NA 3 2020-03-07           1 23.8 90.37    target_0       NA 4 2020-03-07           1 23.8 90.37    target_0 29.95670 5 2020-03-07           1 23.8 90.37    target_1 31.60111 6 2020-03-07           1 23.8 90.37    target_1 32.20208  sc <- es::template_standard_curve head(sc)  target_name n_copies ct_value 1    target_0    1e+01 31.54740 2    target_0    1e+02 26.95023 3    target_0    1e+03 22.39630 4    target_0    1e+04 21.47894 5    target_0    1e+05 16.04474 6    target_1    1e+01 31.85645  result <- es::calc_n_copies(ct_values = df$ct_value,                             target_names = df$target_name,                             standard_curves = sc)  df$n_copies <- result head(df)  date location_id  lat   lon target_name ct_value n_copies 1 2020-03-07           1 23.8 90.37    target_0       NA       NA 2 2020-03-07           1 23.8 90.37    target_0       NA       NA 3 2020-03-07           1 23.8 90.37    target_0       NA       NA 4 2020-03-07           1 23.8 90.37    target_0 29.95670 21.59581 5 2020-03-07           1 23.8 90.37    target_1 31.60111 32.99040 6 2020-03-07           1 23.8 90.37    target_1 32.20208 21.93164"},{"path":"https://gilesjohnr.github.io/es/articles/derivative_quantities.html","id":"relative-quantification-calculating-the-fold-change-in-gene-expression","dir":"Articles","previous_headings":"","what":"Relative quantification: calculating the fold-change in gene expression","title":"Deriving variables from Ct values","text":"absolute quantification number target gene copies nicely interpretable, explicitly account starting amount nucleic acid sample amplification efficiency PCR assay (Bustin et al. 2005). Normalization qPCR data general methodological challenge biology motivated much work statistical methods transform qPCR data (Mar et al. 2009; Bolstad et al. 2003). One method normalization \\(\\Delta \\Delta \\text{Ct}\\) method calculating fold-change gene expression target relative one reference targets (Livak Schmittgen 2001). \\(\\Delta \\Delta \\text{Ct}\\) method perhaps robust way normalize qPCR data particularly important environmental sampling data due often uncontrolled sources samples. developed functions allow calculation standard \\(\\Delta \\Delta \\text{Ct}\\) described Livak Schmittgen (2001) adjusted \\(\\Delta \\Delta \\text{Ct}\\), adjusted PCR amplification efficiency, described Yuan, Wang, Stewart (2008). also included functionality estimate percentile amplification efficiency target nucleic acid using standard curve assay following methods (Yuan, Wang, Stewart 2008; Yuan et al. 2006). formulation \\(\\Delta \\Delta \\text{Ct}\\) begins standard method can defined : \\[ \\begin{align} \\text{Standard method} & = 2^{-\\Delta \\Delta \\text{Ct}} \\\\ -\\Delta \\Delta \\text{Ct} & = -(\\Delta \\text{Ct}_{\\text{treatment}} - \\Delta \\text{Ct}_{\\text{control}})\\\\ \\Delta \\text{Ct}_{\\text{treatment}} & = \\text{Ct}_{\\text{target,treatment}} - \\text{Ct}_{\\text{reference,treatment}}\\\\ \\Delta \\text{Ct}_{\\text{control}} & = \\text{Ct}_{\\text{target,control}} - \\text{Ct}_{\\text{reference,control}}\\\\ \\tag{1} \\end{align} \\] major assumption standard method amplification efficiency qPCR assay 100% efficient. practice, efficiency assay likely slightly less 1, proportion sample nucleic acids replicated cycle (Stolovitzky Cecchi 1996), can non-trivial impact output variable exponential component. Therefore, adjusted \\(\\Delta \\Delta \\text{Ct}\\) method accounts imperfect efficiency amplification efficiency (noted \\(\\phi\\) ). \\[ \\begin{align} \\text{Adjusted method} & = 2^{-\\Delta \\Delta \\text{Ct}} \\\\ -\\Delta \\Delta \\text{Ct} & = -(\\Delta \\text{Ct}_{\\text{treatment}} - \\Delta \\text{Ct}_{\\text{control}})\\\\ \\Delta \\text{Ct}_{\\text{treatment}} & = \\text{Ct}_{\\text{target,treatment}} \\times \\phi_{\\text{target,treatment}} - \\text{Ct}_{\\text{reference,treatment}} \\times \\phi_{\\text{reference,treatment}}\\\\ \\Delta \\text{Ct}_{\\text{control}} & = \\text{Ct}_{\\text{target,control}} \\times \\phi_{\\text{target,control}} - \\text{Ct}_{\\text{reference,control}} \\times \\phi_{\\text{reference,control}}\\\\ \\tag{2} \\end{align} \\] Since environmental sampling data typically control group, use temporal method es package relate “treatment” observations time \\(t\\) “control” observations time \\(t=0\\); see Section 1.4 Livak Schmittgen (2001). means can write Equation 1 : \\[ \\begin{align} \\text{Standard time-based method} & = 2^{-\\Delta \\Delta \\text{Ct}} \\\\ -\\Delta \\Delta \\text{Ct} & = -(\\Delta \\text{Ct}_{t} - \\Delta \\text{Ct}_{t=0})\\\\ \\Delta \\text{Ct}_{t} & = \\text{Ct}_{\\text{target},t} - \\text{Ct}_{\\text{reference},t}\\\\ \\Delta \\text{Ct}_{t=0} & = \\text{Ct}_{\\text{target},t=0} - \\text{Ct}_{\\text{reference},t=0}\\\\ \\tag{3} \\end{align} \\] , incorporate weighting according amplification efficiency target described Yuan, Wang, Stewart (2008) Yuan et al. (2006), get following: \\[ \\begin{align} \\text{Adjusted time-based method} & = 2^{-\\Delta \\Delta \\text{Ct}} \\\\ -\\Delta \\Delta \\text{Ct} & = -(\\Delta \\text{Ct}_{t} - \\Delta \\text{Ct}_{t=0})\\\\ \\Delta \\text{Ct}_{t} & = \\text{Ct}_{\\text{target},t} \\times \\phi_{\\text{target}} - \\text{Ct}_{\\text{reference},t} \\times \\phi_{\\text{reference}}\\\\ \\Delta \\text{Ct}_{t=0} & = \\text{Ct}_{\\text{target},t=0} \\times \\phi_{\\text{target}} - \\text{Ct}_{\\text{reference},t=0} \\times \\phi_{\\text{reference}}\\\\ \\tag{4} \\end{align} \\] \\(\\phi_{\\text{target}}\\) \\(\\phi_{\\text{reference}}\\) estimated qPCR amplification efficiency values target reference genes respectively. Note traditionally also \\(\\phi\\) value treatment control groups, since environmental sampling data explicit sample treatment use \\(\\phi\\) time = \\(t\\) \\(t=0\\). following code blocks show calculate standard adjusted \\(\\Delta \\Delta \\text{Ct}\\) values simulated environmental sampling data set shown template_es_data template_standard_curve data objects. calculate standard \\(\\Delta \\Delta \\text{Ct}\\) value (Equation 1) initially described Livak Schmittgen (2001) assume PCR efficiency 1 targets. following code calculation single observation. adjusted \\(\\Delta \\Delta \\text{Ct}\\) (Equation 2) can calculated incorporating arguments prefix pae_* percentile amplification efficiency. temporally-controlled standard \\(\\Delta \\Delta \\text{Ct}\\) calculation (Equation 3) can applied entire data set using apply_delta_delta_ct() function. adjusted time-based \\(\\Delta \\Delta \\text{Ct}\\) calculation (Equation 4) can calculated using apply_amplification_efficiency() function get efficiency estimates standard curve data set. Finally, code shows full example adding adjusted time-based \\(\\Delta \\Delta \\text{Ct}\\) data frame visualizing result.","code":"# Standard method calc_delta_delta_ct(ct_target_treatment = 32.5,                     ct_reference_treatment = 25,                     ct_target_control = 34,                     ct_reference_control = 30)  [1] 0.08838835 # Adjusted method incorporating amplification efficiency calc_delta_delta_ct(ct_target_treatment = 32.5,                     ct_reference_treatment = 25,                     ct_target_control = 34,                     ct_reference_control = 30,                     pae_target_treatment=0.97,                     pae_target_control=0.98,                     pae_reference_treatment=0.98,                     pae_reference_control=0.99)  [1] 0.09440454 # Standard temporally-controlled method df_example <- template_es_data colnames(df_example)[colnames(df_example) == 'date'] <- 'sample_date'  ddct_standard <- apply_delta_delta_ct(df = df_example,                                       target_names = c('target_1', 'target_2', 'target_3'),                                       reference_names = rep('target_0', 3))  head(ddct_standard)    location_id sample_date target_name delta_delta_ct 1           1  2020-03-07    target_1       1.000000 2           1  2020-03-11    target_1      17.762262 3           1  2020-03-23    target_1      29.642154 4           1  2020-03-24    target_1      32.191141 5           1  2020-03-30    target_1       5.694505 6           1  2020-04-03    target_1       8.620370 # Adjusted temporally-controlled method df_example <- template_es_data colnames(df_example)[colnames(df_example) == 'date'] <- 'sample_date'  pae <- apply_amplification_efficiency(template_standard_curve)  ddct_adjusted <- apply_delta_delta_ct(df = df_example,                                       target_names = c('target_1', 'target_2', 'target_3'),                                       reference_names = rep('target_0', 3),                                       pae_names = pae$target_name,                                       pae_values = pae$mean)  head(ddct_adjusted)    location_id sample_date target_name delta_delta_ct 1           1  2020-03-07    target_1       1.000000 2           1  2020-03-11    target_1      17.465229 3           1  2020-03-23    target_1      26.118476 4           1  2020-03-24    target_1      29.213109 5           1  2020-03-30    target_1       5.485189 6           1  2020-04-03    target_1       7.632729 library(mgcv) library(ggplot2) library(cowplot)  # Estimate amplification efficiency pae <- apply_amplification_efficiency(template_standard_curve)  # Calculate standard delta delta Ct ddct_standard <- apply_delta_delta_ct(df = df_example,                                       target_names = c('target_1', 'target_2', 'target_3'),                                       reference_names = rep('target_0', 3))  # Calculate adjusted delta delta Ct ddct_adjusted <- apply_delta_delta_ct(df = df_example,                                       target_names = c('target_1', 'target_2', 'target_3'),                                       reference_names = rep('target_0', 3),                                       pae_names = pae$target_name,                                       pae_values = pae$mean)  # Combine results colnames(ddct_standard)[colnames(ddct_standard) == 'delta_delta_ct'] <- 'delta_delta_ct_standard' colnames(ddct_adjusted)[colnames(ddct_adjusted) == 'delta_delta_ct'] <- 'delta_delta_ct_adjusted' ddct <- merge(ddct_standard, ddct_adjusted, by=c('location_id', 'sample_date', 'target_name'), all=T) ddct <- merge(template_es_data, ddct, by=c('location_id', 'sample_date', 'target_name'), all.x=T)  # Fit time series models to delta delta Ct to visualize time trends fit_gam <- function(x) {       require(mgcv)       # Fit GAMs with a Gaussian process smoothing term and a Gamma link function      mod_standard <- gam(delta_delta_ct_standard ~ s(as.numeric(sample_date), bs = \"gp\"), family = Gamma(link = \"inverse\"), data = x, method = \"REML\", na.action = na.exclude)      mod_adjusted <- gam(delta_delta_ct_adjusted ~ s(as.numeric(sample_date), bs = \"gp\"), family = Gamma(link = \"inverse\"), data = x, method = \"REML\", na.action = na.exclude)       # Add model predictions to data      x$pred_delta_delta_ct_standard <- predict(mod_standard, newdata = x, type='response', se.fit=F)      x$pred_delta_delta_ct_adjusted <- predict(mod_adjusted, newdata = x, type='response', se.fit=F)       return(x)  }  # Apply GAMs by location tmp <- ddct[ddct$target_name %in% c('target_2'),] tmp <- lapply(split(tmp, factor(tmp$location_id)), fit_gam) tmp <- do.call(rbind, tmp)  # Visualize result p1 <- ggplot(ddct[ddct$target_name %in% c('target_0', 'target_2'),],        aes(x = sample_date)) +      geom_point(aes(y = ct_value), alpha = 0.6, shape = 16, size = 2) +      facet_grid(rows = vars(target_name), cols = vars(location_id)) +      theme_bw(base_size = 15) +      theme(panel.grid.major = element_line(size = 0.25, linetype = 'solid', color = 'grey80'),            panel.grid.minor = element_blank(),            panel.border = element_blank(),            axis.line = element_line(size = 0.5, linetype = 'solid', color = 'black'),            legend.position = \"bottom\",            legend.title = element_blank(),            strip.background = element_rect(fill = \"white\", color = \"white\", size = 0.5),            axis.text.x = element_text(angle = 45, hjust = 1, size = 10)) +      labs(x = element_blank(),           y = \"Ct value\",           subtitle = \"Raw Ct values\") +      scale_x_date(date_breaks = \"3 month\", date_labels = \"%b %Y\")   p2 <- ggplot(tmp, aes(x = sample_date)) +      geom_point(aes(y = delta_delta_ct_standard, color = 'Standard'), alpha = 0.6, shape = 16, size = 2) +      geom_point(aes(y = delta_delta_ct_adjusted, color = 'Adjusted'), alpha = 0.6, shape = 17, size = 2) +      geom_line(aes(y = pred_delta_delta_ct_standard, color = 'Standard'), size = 1) +      geom_line(aes(y = pred_delta_delta_ct_adjusted, color = 'Adjusted'), size = 1) +      facet_grid(rows = vars(target_name), cols = vars(location_id)) +      theme_bw(base_size = 15) +      theme(panel.grid.major = element_line(size = 0.25, linetype = 'solid', color = 'grey80'),           panel.grid.minor = element_blank(),           panel.border = element_blank(),           axis.line = element_line(size = 0.5, linetype = 'solid', color = 'black'),           legend.position = \"bottom\",           legend.title = element_blank(),           strip.background = element_rect(fill = \"white\", color = \"white\", size = 0.5),           axis.text.x = element_text(angle = 45, hjust = 1, size = 10)) +      labs(x = element_blank(),           y = expression(2^{-Delta * Delta * Ct}),           subtitle = \"Comparison of standard and adjusted values\") +      scale_color_manual(values = c(\"Standard\" = \"dodgerblue\", \"Adjusted\" = \"tomato2\")) +      scale_x_date(date_breaks = \"3 month\", date_labels = \"%b %Y\")  plot_grid(p1, p2, nrow=2, align='v', rel_heights = c(1.1,1))"},{"path":[]},{"path":"https://gilesjohnr.github.io/es/articles/get_climate_data.html","id":"setup-with-environmental-sampling-observations","dir":"Articles","previous_headings":"","what":"Setup with environmental sampling observations","title":"Getting climate data","text":"","code":"library(es) library(ggplot2)  # Get data frame of simulated environmental sampling data df <- es::template_es_data head(df)  date location_id  lat   lon target_name ct_value 1 2020-03-07           1 23.8 90.37    target_0       NA 2 2020-03-07           1 23.8 90.37    target_0       NA 3 2020-03-07           1 23.8 90.37    target_0       NA 4 2020-03-07           1 23.8 90.37    target_0 29.95670 5 2020-03-07           1 23.8 90.37    target_1 31.60111 6 2020-03-07           1 23.8 90.37    target_1 32.20208"},{"path":"https://gilesjohnr.github.io/es/articles/get_climate_data.html","id":"precipitation-data","dir":"Articles","previous_headings":"","what":"Precipitation data","title":"Getting climate data","text":"","code":"# Get precipitation data precip <- es::get_precip_data(lon = df$lon,                               lat = df$lat,                               dates = df$date,                               intervals = c(1,3,7))  head(precip)     id  lat   lon       date precip_daily_sum precip_daily_sum_1 precip_daily_sum_3 precip_daily_sum_7 8   1 23.8 90.37 2020-03-07              2.6               15.8               24.4               30.2 9   1 23.8 90.37 2020-03-08              2.3                4.9               24.0               32.5 10  1 23.8 90.37 2020-03-09              0.0                2.3               18.1               32.5 11  1 23.8 90.37 2020-03-10              0.0                0.0                4.9               32.5 12  1 23.8 90.37 2020-03-11              0.0                0.0                2.3               26.7 13  1 23.8 90.37 2020-03-12              0.0                0.0                0.0               24.0  ggplot2::ggplot(precip, aes(x = date)) +      geom_line(aes(y = precip_daily_sum_7, col='Cumulative sum 7 days')) +      geom_line(aes(y = precip_daily_sum_3, col='Cumulative sum 3 days')) +      geom_line(aes(y = precip_daily_sum_1, col='Cumulative sum 1 day')) +      geom_line(aes(y = precip_daily_sum)) +      facet_grid(rows=vars(id)) +      labs(x=\"\", y = \"Precipitation (mm)\") +      theme_bw() +      theme(legend.position = 'bottom',            legend.title = element_blank())"},{"path":"https://gilesjohnr.github.io/es/articles/get_climate_data.html","id":"temperature-data","dir":"Articles","previous_headings":"","what":"Temperature data","title":"Getting climate data","text":"","code":"# Get temperature data temp <- es::get_temp_data(lon = df$lon,                           lat = df$lat,                           dates = df$date,                           intervals = c(1,5,10))  head(temp)     id  lat   lon       date temp_daily_atu temp_daily_atu_1 temp_daily_atu_5 temp_daily_atu_10 11  1 23.8 90.37 2020-03-07       21.74167         44.39167         139.3792          245.8292 12  1 23.8 90.37 2020-03-08       22.37917         44.12083         137.4625          248.1125 13  1 23.8 90.37 2020-03-09       22.32917         44.70833         135.8833          249.9000 14  1 23.8 90.37 2020-03-10       22.08750         44.41667         134.8625          250.8208 15  1 23.8 90.37 2020-03-11       24.07917         46.16667         135.2667          253.2375 16  1 23.8 90.37 2020-03-12       26.17917         50.25833         138.7958          256.4333  ggplot2::ggplot(temp, aes(x = date)) +      geom_line(aes(y = temp_daily_atu_10, col='Accumulated temperature 10 days')) +      geom_line(aes(y = temp_daily_atu_5, col='Accumulated temperature 5 days')) +      geom_line(aes(y = temp_daily_atu_1, col='Accumulated temperature 1 day')) +      geom_line(aes(y = temp_daily_atu)) +      facet_grid(rows=vars(id)) +      labs(x=\"\", y = \"Accumulated Thermal Units (ATUs)\") +      theme_bw() +      theme(legend.position = 'bottom',            legend.title = element_blank())"},{"path":"https://gilesjohnr.github.io/es/articles/get_climate_data.html","id":"evaporative-stress-index-esi-data","dir":"Articles","previous_headings":"","what":"Evaporative Stress Index (ESI) data","title":"Getting climate data","text":"","code":"# Evaporative Stress Index (ESI) data esi <- es::get_esi_data(lon = df$lon,                         lat = df$lat,                         dates = df$date,                         intervals = c(5,10,20)) head(esi)    id       date   lon  lat esi_daily_avg observed esi_daily_avg_5 esi_daily_avg_10 esi_daily_avg_20 1  1 2020-03-07 90.37 23.8     0.4875092        0       0.7513141        1.1653987         1.699109 2  1 2020-03-08 90.37 23.8     0.4014352        0       0.6328268        1.0174448         1.607651 3  1 2020-03-09 90.37 23.8     0.3153611        0       0.5305462        0.8783309         1.510441 4  1 2020-03-10 90.37 23.8     0.2292871        0       0.4444722        0.7480570         1.407479 5  1 2020-03-11 90.37 23.8     0.1432131        1       0.3583981        0.6266231         1.298765 6  1 2020-03-12 90.37 23.8     0.1144625        0       0.2818780        0.5192403         1.191385  ggplot2::ggplot(esi, aes(x = date)) +      geom_line(aes(y = esi_daily_avg_20, col='Average ESI 20 days')) +      geom_line(aes(y = esi_daily_avg_10, col='Average ESI 10 days')) +      geom_line(aes(y = esi_daily_avg_5, col='Average ESI 5 days')) +      geom_line(aes(y = esi_daily_avg)) +      facet_grid(rows=vars(id)) +      labs(x=\"\", y = \"Evaporative Stress Index (ESI)\") +      theme_bw() +      theme(legend.position = 'bottom',            legend.title = element_blank())"},{"path":"https://gilesjohnr.github.io/es/articles/get_climate_data.html","id":"daily-discharge-data-from-nearest-river","dir":"Articles","previous_headings":"","what":"Daily discharge data from nearest river","title":"Getting climate data","text":"","code":"# Get daily discharge data from nearest river river <- es::get_river_discharge_data(lon = df$lon,                                       lat = df$lat,                                       dates = df$date)  head(river)    id  lat   lon       date daily_river_discharge 1  1 23.8 90.37 2020-03-07                  1.31 2  1 23.8 90.37 2020-03-08                  1.12 3  1 23.8 90.37 2020-03-09                  1.03 4  1 23.8 90.37 2020-03-10                  0.97 5  1 23.8 90.37 2020-03-11                  0.94 6  1 23.8 90.37 2020-03-12                  0.94  ggplot2::ggplot(river, aes(x = date)) +      geom_line(aes(y = daily_river_discharge)) +      facet_grid(rows=vars(id)) +      labs(x=\"\", y = \"Local River Discharge (m^3/s)\") +      theme_bw() +      theme(legend.position = 'bottom',            legend.title = element_blank())"},{"path":"https://gilesjohnr.github.io/es/articles/get_climate_data.html","id":"merge-climate-data-with-environmental-sampling-observations","dir":"Articles","previous_headings":"","what":"Merge climate data with environmental sampling observations","title":"Getting climate data","text":"","code":"# Merge climate data with environmental sampling observations climate_data <- c('precip', 'temp', 'esi', 'river')  for (i in 0:length(climate_data)) {       if (i == 0) {            result <- df       } else {            result <- merge(result,                           subset(get(climate_data[i]), select=-c(id)),                           by=c('lon', 'lat', 'date'),                           all.x=TRUE)       }  }  head(result)      lon  lat       date location_id target_name ct_value precip_daily_sum precip_daily_sum_1 precip_daily_sum_3 precip_daily_sum_7 temp_daily_atu 1 90.37 23.8 2020-03-07           1    target_2 33.42286              2.6               15.8               24.4               30.2       21.74167 2 90.37 23.8 2020-03-07           1    target_2 33.42286              2.6               15.8               24.4               30.2       21.74167 3 90.37 23.8 2020-03-07           1    target_2 33.42286              2.6               15.8               24.4               30.2       21.74167 4 90.37 23.8 2020-03-07           1    target_3 32.88970              2.6               15.8               24.4               30.2       21.69167 5 90.37 23.8 2020-03-07           1    target_3 32.88970              2.6               15.8               24.4               30.2       21.69167 6 90.37 23.8 2020-03-07           1    target_3 32.88970              2.6               15.8               24.4               30.2       21.69167   temp_daily_atu_1 temp_daily_atu_5 temp_daily_atu_10 esi_daily_avg observed esi_daily_avg_5 esi_daily_avg_10 esi_daily_avg_20 daily_river_discharge 1         44.39167         139.3792          245.8292     0.4875092        0       0.7513141         1.165399         1.699109                  1.31 2         44.39167         139.3792          245.8292     0.4875092        0       0.7513141         1.165399         1.699109                  1.31 3         44.39167         139.3792          245.8292     0.4875092        0       0.7513141         1.165399         1.699109                  0.69 4         44.28333         139.0708          245.2917     0.4875092        0       0.7513141         1.165399         1.699109                  1.31 5         44.28333         139.0708          245.2917     0.4875092        0       0.7513141         1.165399         1.699109                  1.31 6         44.28333         139.0708          245.2917     0.4875092        0       0.7513141         1.165399         1.699109                  0.69"},{"path":"https://gilesjohnr.github.io/es/articles/get_climate_data.html","id":"save-downloaded-climate-data","dir":"Articles","previous_headings":"","what":"Save downloaded climate data","title":"Getting climate data","text":"","code":"out_path <- file.path(getwd(), 'tmp') dir.create(out_path)  for (i in 1:length(climate_data)) {       write.csv(get(x = climate_data[i]),                file = file.path(out_path, paste0('climate_data_', climate_data[i], '.csv')),                row.names = FALSE)  }"},{"path":"https://gilesjohnr.github.io/es/articles/template_es_data.html","id":"template-environmental-sampling-data","dir":"Articles","previous_headings":"","what":"Template environmental sampling data","title":"Templates for input data sets","text":"primary data required methods es package shown template_es_data object. data 6 columns give time location observation Cycle Threshold (Ct) value qPCR assay. code shows view data template: detailed descriptions variable template_es_data object shown table : plot shows temporal distribution simulated data template_es_data object:","code":"library(es) head(template_es_data) date location_id  lat   lon target_name ct_value 1 2020-03-07           1 23.8 90.37    target_0       NA 2 2020-03-07           1 23.8 90.37    target_0       NA 3 2020-03-07           1 23.8 90.37    target_0       NA 4 2020-03-07           1 23.8 90.37    target_0 29.94516 5 2020-03-07           1 23.8 90.37    target_1 31.61178 6 2020-03-07           1 23.8 90.37    target_1 32.22351  str(template_es_data) 'data.frame':   5200 obs. of  6 variables:      $ date       : IDate, format: \"2020-03-07\" \"2020-03-07\" ... $ location_id: int  1 1 1 1 1 1 1 1 1 1 ... $ lat        : num  23.8 23.8 23.8 23.8 23.8 23.8 23.8 23.8 23.8 23.8 ... $ lon        : num  90.4 90.4 90.4 90.4 90.4 ... $ target_name: chr  \"target_0\" \"target_0\" \"target_0\" \"target_0\" ... $ ct_value   : num  NA NA NA 29.9 31.6 ... ggplot(template_es_data, aes(x=sample_date, y=ct_value, color=target_name)) +      geom_point(alpha=0.5) +      facet_grid(rows=vars(location_id), cols=vars(target_name)) +      scale_x_date(date_breaks = \"3 month\", date_labels = \"%b %Y\") +      theme_bw() +      theme(legend.position = 'none') +      labs(x = element_blank(),           y = \"Ct value\",           title = \"Template of simulated environmental sampling data\")"},{"path":"https://gilesjohnr.github.io/es/articles/template_es_data.html","id":"template-standard-curve-data","dir":"Articles","previous_headings":"","what":"Template standard curve data","title":"Templates for input data sets","text":"Standard curve data provide results standardized qPCR assays relate Ct values number gene copies particular target. data, calc_n_copies() function infer number gene copies observed Ct values data set formatted according template_es_data object. view template standard curve data, see code : detailed descriptions variable template_standard_curve object shown table : plot shows simulated standard curve data template_standard_curve object:","code":"library(es) head(template_standard_curve)   target_name n_copies ct_value 1    target_1    1e+01 31.29322 2    target_1    1e+02 27.73392 3    target_1    1e+03 23.48097 4    target_1    1e+04 18.91412 5    target_1    1e+05 16.68971 6    target_2    1e+01 32.34237  str(template_standard_curve) 'data.frame':   15 obs. of  3 variables:  $ target_name: chr  \"target_1\" \"target_1\" \"target_1\" \"target_1\" ...  $ n_copies   : num  1e+01 1e+02 1e+03 1e+04 1e+05 1e+01 1e+02 1e+03 1e+04 1e+05 ...  $ ct_value   : num  31.3 27.7 23.5 18.9 16.7 ... ggplot(template_standard_curve, aes(x=ct_value, y=log(n_copies), color=target_name)) +      geom_point(alpha=0.5) +      geom_smooth(method = \"lm\", se = FALSE, size = 0.5, linetype=2) +      facet_wrap(vars(target_name)) +      theme_bw() +      theme(legend.position = 'none') +      labs(x = \"Ct value\",           y = \"log(number gene copies)\",           title = \"Template standard curve data for each target\")"},{"path":"https://gilesjohnr.github.io/es/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"John R Giles. Maintainer.","code":""},{"path":"https://gilesjohnr.github.io/es/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"c, email=\"john.giles@gatesfoundation.org\")) (2024). es: Tools analyzing environmental sampling data. R package version 1.0.0, https://gilesjohnr.github.io/es/.","code":"@Manual{,   title = {es: Tools for analyzing environmental sampling data},   author = {{c} and {email=\"john.giles@gatesfoundation.org\"))}},   year = {2024},   note = {R package version 1.0.0},   url = {https://gilesjohnr.github.io/es/}, }"},{"path":[]},{"path":[]},{"path":[]},{"path":"https://gilesjohnr.github.io/es/index.html","id":"to-uninstall-the-es-package","dir":"","previous_headings":"","what":"To uninstall the es package:","title":"Tools for analyzing environmental sampling data","text":"","code":"install.packages(\"devtools\", dependencies = TRUE) devtools::uninstall(file.path(.libPaths()[1], 'es'))"},{"path":"https://gilesjohnr.github.io/es/reference/apply_amplification_efficiency.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply PCR amplification efficiency estimation to a data.frame — apply_amplification_efficiency","title":"Apply PCR amplification efficiency estimation to a data.frame — apply_amplification_efficiency","text":"function applies est_amplification_efficiency() function data.frame object follows standardized format shown template_standard_curve data set.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/apply_amplification_efficiency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply PCR amplification efficiency estimation to a data.frame — apply_amplification_efficiency","text":"","code":"apply_amplification_efficiency(standard_curves)"},{"path":"https://gilesjohnr.github.io/es/reference/apply_amplification_efficiency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply PCR amplification efficiency estimation to a data.frame — apply_amplification_efficiency","text":"standard_curves data.frame giving target name, serial diluted concentration target nucleic acid, Ct value standard curve assay. Must follow template_standard_curve standardized format.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/apply_amplification_efficiency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply PCR amplification efficiency estimation to a data.frame — apply_amplification_efficiency","text":"data.frame containing mean, low high 95% confidence interval percentile amplification efficiency target name.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/apply_amplification_efficiency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply PCR amplification efficiency estimation to a data.frame — apply_amplification_efficiency","text":"","code":"if (FALSE) {  apply_amplification_efficiency(template_standard_curve)  }"},{"path":"https://gilesjohnr.github.io/es/reference/apply_delta_delta_ct.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply the delta delta Ct calculation to a data.frame — apply_delta_delta_ct","title":"Apply the delta delta Ct calculation to a data.frame — apply_delta_delta_ct","text":"function calculate delta delta Ct metric applicable observations data.frame applying calc_delta_delta_ct function. data.frame must following columns: 'location_id', 'sample_date', 'target_name', 'ct_value'. relevant target_names associated reference_names must provided. result data.frame containing 'delta_delta_ct' column can merge source data.frame.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/apply_delta_delta_ct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply the delta delta Ct calculation to a data.frame — apply_delta_delta_ct","text":"","code":"apply_delta_delta_ct(   df,   target_names,   reference_names,   pae_names = NULL,   pae_values = NULL )"},{"path":"https://gilesjohnr.github.io/es/reference/apply_delta_delta_ct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply the delta delta Ct calculation to a data.frame — apply_delta_delta_ct","text":"df data.frame containing following columns: 'location_id', 'sample_date', 'target_name', 'ct_value'. target_names Character vector giving names target genes. reference_names Character vector giving names reference genes associated target gene. pae_names Character vector giving names target genes reference genes percentile amplification efficiency estimated. Default NULL. pae_values numeric scalar giving estimated PCR amplification efficiency names pae_names. Defaults NULL, assumes 100% efficiency.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/apply_delta_delta_ct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply the delta delta Ct calculation to a data.frame — apply_delta_delta_ct","text":"data.frame","code":""},{"path":"https://gilesjohnr.github.io/es/reference/apply_delta_delta_ct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply the delta delta Ct calculation to a data.frame — apply_delta_delta_ct","text":"","code":"if (FALSE) {  pae <- apply_amplification_efficiency(template_standard_curve)  ddct_standard <- apply_delta_delta_ct(df = template_es_data,                                       target_names = c('target_1', 'target_2', 'target_3'),                                       reference_names = rep('target_0', 3))  ddct_adjusted <- apply_delta_delta_ct(df = template_es_data,                                       target_names = c('target_1', 'target_2', 'target_3'),                                       reference_names = rep('target_0', 3),                                       pae_names = pae$target_name,                                       pae_values = pae$mean)  }"},{"path":"https://gilesjohnr.github.io/es/reference/calc_delta_delta_ct.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate delta delta Ct — calc_delta_delta_ct","title":"Calculate delta delta Ct — calc_delta_delta_ct","text":"function calculates relative gene expression using delta delta Ct method described Livak Schmittgen (2001). Adjusted delta delta Ct values following Yuan et al. (2008) can calculated providing estimated values percentile amplification efficiency pae_* arguments.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/calc_delta_delta_ct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate delta delta Ct — calc_delta_delta_ct","text":"","code":"calc_delta_delta_ct(   ct_target_treatment,   ct_target_control,   ct_reference_treatment,   ct_reference_control,   pae_target_treatment = 1,   pae_target_control = 1,   pae_reference_treatment = 1,   pae_reference_control = 1 )"},{"path":"https://gilesjohnr.github.io/es/reference/calc_delta_delta_ct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate delta delta Ct — calc_delta_delta_ct","text":"ct_target_treatment numeric scalar providing Ct value target gene observation treatment group ct_target_control numeric scalar providing Ct value target gene reference observation control group ct_reference_treatment numeric scalar providing Ct value reference gene observation treatment group ct_reference_control numeric scalar providing Ct value reference gene reference observation control group pae_target_treatment numeric scalar providing percentile amplification efficiency target gene treatment group. Defaults 1. pae_target_control numeric scalar providing percentile amplification efficiency target gene control group. Defaults 1. pae_reference_treatment numeric scalar providing percentile amplification efficiency reference gene treatment group. Defaults 1. pae_reference_control numeric scalar providing percentile amplification efficiency reference gene control group. Defaults 1.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/calc_delta_delta_ct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate delta delta Ct — calc_delta_delta_ct","text":"Scalar","code":""},{"path":"https://gilesjohnr.github.io/es/reference/calc_delta_delta_ct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate delta delta Ct — calc_delta_delta_ct","text":"","code":"if (FALSE) {  # Traditional method calc_delta_delta_ct(ct_target_treatment = 32.5,                     ct_reference_treatment = 25,                     ct_target_control = 34,                     ct_reference_control = 30)  # Adjusted calculation incorporating amplification efficiency calc_delta_delta_ct(ct_target_treatment = 32.5,                     ct_reference_treatment = 25,                     ct_target_control = 34,                     ct_reference_control = 30,                     pae_target_treatment=0.97,                     pae_target_control=0.98,                     pae_reference_treatment=0.98,                     pae_reference_control=0.99)  }"},{"path":"https://gilesjohnr.github.io/es/reference/calc_n_copies.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate number of target copies — calc_n_copies","title":"Calculate number of target copies — calc_n_copies","text":"function calculates quantitative value qPCR Ct value. Cycle threshold converted estimated number gene target copies (e.g. viral load viral pathogen) fitting log linear model standard curve data using model find point estimate provided Ct values.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/calc_n_copies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate number of target copies — calc_n_copies","text":"","code":"calc_n_copies(ct_values, target_names, standard_curves)"},{"path":"https://gilesjohnr.github.io/es/reference/calc_n_copies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate number of target copies — calc_n_copies","text":"ct_values numeric vector giving Ct value observation. target_names character vector giving target names element 'ct_values'. standard_curves data.frame containing results standard curve dilution experiment. Elements 'target_names' must map either 'target_name_unique' 'target_name_concise'. See package data object standard_curves_dhaka template.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/calc_n_copies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate number of target copies — calc_n_copies","text":"Vector","code":""},{"path":"https://gilesjohnr.github.io/es/reference/calc_n_copies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate number of target copies — calc_n_copies","text":"","code":"if (FALSE) {  df <- template_es_data  test <- calc_n_copies(ct_values = df$ct_value,                       target_names = df$target_name,                       standard_curves = template_standard_curve)  df$n_copies <- test  }"},{"path":"https://gilesjohnr.github.io/es/reference/calc_sample_sizes.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate sample sizes — calc_sample_sizes","title":"Calculate sample sizes — calc_sample_sizes","text":"function takes compiled data.frame following format shown template_es_data object calculates basic sample sizes detection rates gene targets.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/calc_sample_sizes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate sample sizes — calc_sample_sizes","text":"","code":"calc_sample_sizes(df, cutoff = 40)"},{"path":"https://gilesjohnr.github.io/es/reference/calc_sample_sizes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate sample sizes — calc_sample_sizes","text":"df data.frame produced compile_tac_data function containing 'target_name' 'ct_value' columns. cutoff Numeric scalar giving cutoff Ct value gene target deemed absent sample. Default 40.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/calc_sample_sizes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate sample sizes — calc_sample_sizes","text":"data.frame","code":""},{"path":"https://gilesjohnr.github.io/es/reference/calc_sample_sizes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate sample sizes — calc_sample_sizes","text":"","code":"if (FALSE) {  calc_sample_sizes(template_es_data)  }"},{"path":"https://gilesjohnr.github.io/es/reference/coords_to_iso3.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert coordinates to ISO country code — coords_to_iso3","title":"Convert coordinates to ISO country code — coords_to_iso3","text":"function takes set longitude latitude coordinates retrieves administrative units point lies within. administrative units given ISO-3166 Alpha-3 country code standard (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3).","code":""},{"path":"https://gilesjohnr.github.io/es/reference/coords_to_iso3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert coordinates to ISO country code — coords_to_iso3","text":"","code":"coords_to_iso3(lon, lat)"},{"path":"https://gilesjohnr.github.io/es/reference/coords_to_iso3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert coordinates to ISO country code — coords_to_iso3","text":"lon numeric vector giving longitude sampling sites Decimal Degrees. lat numeric vector giving latitude sampling sites Decimal Degrees.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/coords_to_iso3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert coordinates to ISO country code — coords_to_iso3","text":"data.frame","code":""},{"path":"https://gilesjohnr.github.io/es/reference/coords_to_iso3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert coordinates to ISO country code — coords_to_iso3","text":"","code":"if (FALSE) {  coords_to_iso3(lon = template_es_data$lon,                lat = template_es_data$lat)  }"},{"path":"https://gilesjohnr.github.io/es/reference/download_admin_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Download administrative boundaries from geoBoundaries API — download_admin_data","title":"Download administrative boundaries from geoBoundaries API — download_admin_data","text":"function takes single ISO country code downloads corresponding high resolution administrative boundary GeoJSON files www.geoBoundaries.org API hosted GitHub . desired administrative level available next detailed administrative level returned.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/download_admin_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download administrative boundaries from geoBoundaries API — download_admin_data","text":"","code":"download_admin_data(   iso3,   release,   path_output,   simplified = FALSE,   keep_geojson = FALSE )"},{"path":"https://gilesjohnr.github.io/es/reference/download_admin_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download administrative boundaries from geoBoundaries API — download_admin_data","text":"iso3 three-letter capitalized character string. Must follow ISO-3166 Alpha-3 country code release character string specifying release type geoBoundaries API. one 'gbOpen', 'gbHumanitarian', 'gbAuthoritative'.  Release types described https://www.geoboundaries.org/api.html#api. path_output character string giving file path output directory save downloaded data. simplified Logical indicating whether download simplified administrative boundaries instead high resolution. Default FALSE. keep_geojson Logical indicating whether keep raw geojson files downloaded geoBoundaries API. Default FALSE.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/download_admin_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download administrative boundaries from geoBoundaries API — download_admin_data","text":"Character string giving path downloaded data.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/download_admin_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download administrative boundaries from geoBoundaries API — download_admin_data","text":"","code":"if (FALSE) { download_admin_data(iso3 = 'TWN',                     release = 'gbOpen',                     path_output = getwd()) }"},{"path":"https://gilesjohnr.github.io/es/reference/download_elevation_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Download DEM from AWS Terrain Tiles — download_elevation_data","title":"Download DEM from AWS Terrain Tiles — download_elevation_data","text":"function takes coordinates sampling sites (longitude latitude) downloads Digital Elevation Model (DEM) surrounding area. DEM approximate spatial resolution 100 meters. data derived Shuttle Radar Topography Mission (SRTM) DEM, accessible Amazon Web Services (AWS) API elevatr R package.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/download_elevation_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download DEM from AWS Terrain Tiles — download_elevation_data","text":"","code":"download_elevation_data(lon, lat, path_output)"},{"path":"https://gilesjohnr.github.io/es/reference/download_elevation_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download DEM from AWS Terrain Tiles — download_elevation_data","text":"lon numeric vector giving longitude sampling sites Decimal Degrees.Can accept vector multiple ISO codes. lat numeric vector giving latitude sampling sites Decimal Degrees. path_output character string giving file path output directory save downloaded data.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/download_elevation_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download DEM from AWS Terrain Tiles — download_elevation_data","text":"Character string giving path downloaded data.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/download_elevation_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download DEM from AWS Terrain Tiles — download_elevation_data","text":"","code":"if (FALSE) {  download_elevation_data(lon = template_es_data$lon,                         lat = template_es_data$lat,                         path_output = getwd())  }"},{"path":"https://gilesjohnr.github.io/es/reference/download_worldpop_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Download WorldPop population raster data — download_worldpop_data","title":"Download WorldPop population raster data — download_worldpop_data","text":"function takes single ISO country code downloads appropriate population count raster data (100m grid cell resolution) WorldPop FTP data server. Note data spatial disaggregations census data using random forest models described Lloyd et al. 2019 available manual download https://hub.worldpop.org/geodata/listing?id=29. Downloaded data sets saved path_output directory .tif format.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/download_worldpop_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download WorldPop population raster data — download_worldpop_data","text":"","code":"download_worldpop_data(   iso3,   year,   constrained = FALSE,   UN_adjusted = FALSE,   path_output )"},{"path":"https://gilesjohnr.github.io/es/reference/download_worldpop_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download WorldPop population raster data — download_worldpop_data","text":"iso3 three-letter capitalized character string. Must follow ISO-3166 Alpha-3 country code standard (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3). Can accept vector multiple ISO codes. year numeric integer scalar giving year WorldPop data download (2024-05-15, years 2000-2020 available) constrained Logical indicating whether get population counts estimated using constrained models (details ). Default FALSE. UN_adjusted Logical indicating whether get population counts adjusted match United Nations national population estimates (details ). Default FALSE. path_output character string giving file path output directory save downloaded data.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/download_worldpop_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download WorldPop population raster data — download_worldpop_data","text":"Character string giving path downloaded data.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/download_worldpop_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download WorldPop population raster data — download_worldpop_data","text":"","code":"if (FALSE) {  download_worldpop_data(iso3='TWN',                        year=2020,                        constrained=FALSE,                        UN_adjusted=FALSE,                        path_output=getwd())  }"},{"path":"https://gilesjohnr.github.io/es/reference/est_amplification_efficiency.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate PCR amplification efficiency — est_amplification_efficiency","title":"Estimate PCR amplification efficiency — est_amplification_efficiency","text":"function takes set serial diluted concentrations target nucleic acid standard curve assay associated Ct values estimates percentile amplification efficiency using linear model described Yuan et al. (2008). Note model uses log base 2 transform assumes serial dilutions double increase concentration. function also requires minimum 5 observations.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/est_amplification_efficiency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate PCR amplification efficiency — est_amplification_efficiency","text":"","code":"est_amplification_efficiency(n_copies, ct_value)"},{"path":"https://gilesjohnr.github.io/es/reference/est_amplification_efficiency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate PCR amplification efficiency — est_amplification_efficiency","text":"n_copies numeric vector giving serial diluted concentration target nucleic acid ct_value numeric vector giving measured Ct value serial dilution standard curve design","code":""},{"path":"https://gilesjohnr.github.io/es/reference/est_amplification_efficiency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate PCR amplification efficiency — est_amplification_efficiency","text":"List containing mean, low high 95% confidence interval percentile amplification efficiency.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/est_amplification_efficiency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate PCR amplification efficiency — est_amplification_efficiency","text":"","code":"if (FALSE) {  sel <- template_standard_curve$target_name == 'target_1' tmp_n_copies <- template_standard_curve$n_copies[sel] tmp_ct_value <- template_standard_curve$ct_value[sel]  est_amplification_efficiency(n_copies = tmp_n_copies,                              ct_value = tmp_ct_value)  }"},{"path":"https://gilesjohnr.github.io/es/reference/get_admin_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get administrative data for a set of points — get_admin_data","title":"Get administrative data for a set of points — get_admin_data","text":"function takes set longitude latitude coordinates retrieves administrative units point lies within.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_admin_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get administrative data for a set of points — get_admin_data","text":"","code":"get_admin_data(lon, lat, path_admin_data)"},{"path":"https://gilesjohnr.github.io/es/reference/get_admin_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get administrative data for a set of points — get_admin_data","text":"lon numeric vector giving longitude sampling sites Decimal Degrees. lat numeric vector giving latitude sampling sites Decimal Degrees. path_admin_data file path admin data. Note function expects .shp format output download_admin_data function another user supplied source.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_admin_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get administrative data for a set of points — get_admin_data","text":"data.frame","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_admin_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get administrative data for a set of points — get_admin_data","text":"","code":"if (FALSE) {  download_admin_data(iso3 = \"BGD\", path_output = getwd())  get_admin_data(lon = template_es_data$lon,                lat = template_es_data$lat,                path_admin_data = file.path(getwd(), 'BGD_admin_levels.shp'))  }"},{"path":"https://gilesjohnr.github.io/es/reference/get_elevation_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get elevation data — get_elevation_data","title":"Get elevation data — get_elevation_data","text":"function takes information set environmental samples collected retrieves elevation (meters) locations approximate 100m spatial resolution. Data come SRTM DEM accessed Amazon Web Services (AWS) API elevatr R package.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_elevation_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get elevation data — get_elevation_data","text":"","code":"get_elevation_data(lon, lat)"},{"path":"https://gilesjohnr.github.io/es/reference/get_elevation_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get elevation data — get_elevation_data","text":"lon numeric vector giving longitude sampling sites Decimal Degrees. lat numeric vector giving latitude sampling sites Decimal Degrees.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_elevation_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get elevation data — get_elevation_data","text":"data.frame","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_elevation_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get elevation data — get_elevation_data","text":"","code":"if (FALSE) {  get_elevation_data(lon = template_es_data$lon,                    lat = template_es_data$lat)  }"},{"path":"https://gilesjohnr.github.io/es/reference/get_esi_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Evaporative Stress Index (ESI) data — get_esi_data","title":"Get Evaporative Stress Index (ESI) data — get_esi_data","text":"function takes information set environmental samples collected retrieves Evaporative Stress Index (ESI) locations times. information ESI, see description . Data come Climate Hazards Center InfraRed Precipitation Station data (CHIRPS) via chirps R package. Additionally, optional intervals argument specifies set intervals function calculate average ESI previous X number days location.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_esi_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Evaporative Stress Index (ESI) data — get_esi_data","text":"","code":"get_esi_data(lon, lat, dates, intervals = NULL)"},{"path":"https://gilesjohnr.github.io/es/reference/get_esi_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Evaporative Stress Index (ESI) data — get_esi_data","text":"lon numeric vector giving longitude sampling sites Decimal Degrees. lat numeric vector giving latitude sampling sites Decimal Degrees. dates character date vector dates giving date sample collected (format YYYY-MM-DD) intervals integer vector giving set time intervals calculate average ESI. Default NULL interval 0 (returns ESI value time t). intervals=3 average ESI preceding 3 days returned.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_esi_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Evaporative Stress Index (ESI) data — get_esi_data","text":"data.frame","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_esi_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Evaporative Stress Index (ESI) data — get_esi_data","text":"","code":"if (FALSE) {  d <- get_esi_data(lon = c(-54.9857, -52.9857), lat = c(-5.9094, -25.8756), dates = c(\"2020-06-01\", \"2020-10-31\"), intervals = c(5,10,20))  head(d)  ggplot2::ggplot(d, aes(x = date)) +      geom_line(aes(y = esi_daily_avg_20, col='Average ESI 20 days')) +      geom_line(aes(y = esi_daily_avg_10, col='Average ESI 10 days')) +      geom_line(aes(y = esi_daily_avg_5, col='Average ESI 5 days')) +      geom_line(aes(y = esi_daily_avg)) +      facet_grid(rows=vars(id)) +      labs(x=\"\", y = \"Evaporative Stress Index (ESI)\") +      theme_bw() +      theme(legend.position = 'bottom',            legend.title = element_blank())  }"},{"path":"https://gilesjohnr.github.io/es/reference/get_geoboundaries_api_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Request metadata from GeoBoundaries API — get_geoboundaries_api_data","title":"Request metadata from GeoBoundaries API — get_geoboundaries_api_data","text":"function retrieves GeoBoundaries data API based specified release, ISO3 country code, administrative level. data found specified administrative level, attempts retrieve data lower administrative level data found lowest level reached.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_geoboundaries_api_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Request metadata from GeoBoundaries API — get_geoboundaries_api_data","text":"","code":"get_geoboundaries_api_data(iso3, admin_level, release = \"gbOpen\")"},{"path":"https://gilesjohnr.github.io/es/reference/get_geoboundaries_api_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Request metadata from GeoBoundaries API — get_geoboundaries_api_data","text":"iso3 three-letter capitalized character string. Must follow ISO-3166 Alpha-3 country code standard (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3). admin_level integer specifying administrative level. 0 5. release character string specifying release type. one 'gbOpen', 'gbHumanitarian', 'gbAuthoritative'. Default 'gbOpen'.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_geoboundaries_api_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Request metadata from GeoBoundaries API — get_geoboundaries_api_data","text":"list containing GeoBoundaries API data file paths admin boundaries .geojson format.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_geoboundaries_api_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Request metadata from GeoBoundaries API — get_geoboundaries_api_data","text":"","code":"if (FALSE) { tmp <- get_geoboundaries_api_data('gbOpen', 'ITA', 2) print(tmp) }"},{"path":"https://gilesjohnr.github.io/es/reference/get_hydro_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get hydrological data — get_hydro_data","title":"Get hydrological data — get_hydro_data","text":"function takes information set environmental samples collected retrieves suite topographical hydrological variables unique location. variables include: elevation, slope, aspect, Topographical Wetness Index (TWI), flow accumulation, total flow accumulation within 500m, distance nearest stream. DEM provided, DEM acquired via elevatr::get_elev_raster suite variables calculated using functions 'WhiteboxTools' R frontend.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_hydro_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get hydrological data — get_hydro_data","text":"","code":"get_hydro_data(lon, lat, path_dem_raster = NULL, path_output)"},{"path":"https://gilesjohnr.github.io/es/reference/get_hydro_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get hydrological data — get_hydro_data","text":"lon numeric vector giving longitude sampling sites Decimal Degrees. lat numeric vector giving latitude sampling sites Decimal Degrees. path_dem_raster file path Digital Elevation Model (DEM) raster. See download_elevation_data methods download DEM raster data. NULL, DEM downloaded automatically using function. path_output file path output directory spatial data saved.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_hydro_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get hydrological data — get_hydro_data","text":"data.frame","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_hydro_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get hydrological data — get_hydro_data","text":"","code":"if (FALSE) {  dir.create(file.path(getwd(), 'tmp'))  get_hydro_data(lon = template_es_data$lon,                lat = template_es_data$lat,                path_dem_raster = file.path(getwd(), 'tmp/dem.tif'),                path_output = file.path(getwd(), 'tmp'))  }"},{"path":"https://gilesjohnr.github.io/es/reference/get_population_catchment.html","id":null,"dir":"Reference","previous_headings":"","what":"Get population counts within catchments of sampling sites — get_population_catchment","title":"Get population counts within catchments of sampling sites — get_population_catchment","text":"function takes vectors sampling site longitude latitude calculates total population residing within drainage catchment coordinate pair. Raster data giving population counts per grid cell Digital Elevation Model (DEM) required. default, function delineates streams based provided DEM. However, optional shapefile (urban sewer network) can specified using path_stream_shp argument used instead natural stream network calculated DEM. Note delineation catchments along streams (sewer networks) still depends directional flow provided DEM. Intermediate spatial variables written directory specified path_output.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_population_catchment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get population counts within catchments of sampling sites — get_population_catchment","text":"","code":"get_population_catchment(   lon,   lat,   path_pop_raster,   path_dem_raster,   path_stream_shp = NULL,   path_output )"},{"path":"https://gilesjohnr.github.io/es/reference/get_population_catchment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get population counts within catchments of sampling sites — get_population_catchment","text":"lon numeric vector giving longitudes sampling sites Decimal Degrees. lat numeric vector giving latitudes sampling sites Decimal Degrees. path_pop_raster file path raster object providing population counts grid cell. See download_worldpop_data methods download population raster data. path_dem_raster file path Digital Elevation Model (DEM) raster. See download_elevation_data methods download DEM raster data. path_stream_shp optional file path stream sewer network shapefile. NULL (default), streams delineated based flow accumulation provided DEM. path_output file path output directory spatial data saved.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_population_catchment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get population counts within catchments of sampling sites — get_population_catchment","text":"data.frame containing catchment area population counts sampling site.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_population_catchment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get population counts within catchments of sampling sites — get_population_catchment","text":"","code":"if (FALSE) {  dir.create(file.path(getwd(), 'tmp'))  download_worldpop_data(iso3 = 'BGD',                        year = 2020,                        constrained = FALSE,                        UN_adjusted = FALSE,                        path_output = file.path(getwd(), 'tmp'))  download_elevation_data(lon = template_es_data$lon,                         lat = template_es_data$lat,                         path_output = file.path(getwd(), 'tmp'))  get_population_catchment(lon = template_es_data$lon,                          lat = template_es_data$lat,                          path_pop_raster = file.path(getwd(), 'tmp/bgd_ppp_2020.tif'),                          path_dem_raster = file.path(getwd(), 'tmp/dem.tif'),                          path_output = file.path(getwd(), 'tmp'))  }"},{"path":"https://gilesjohnr.github.io/es/reference/get_population_radius.html","id":null,"dir":"Reference","previous_headings":"","what":"Get population counts within a radius of sampling sites — get_population_radius","title":"Get population counts within a radius of sampling sites — get_population_radius","text":"function takes vectors sampling site longitude latitude calculates total population residing within given radius around sampling site. Intermediate spatial variables written directory specified path_output.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_population_radius.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get population counts within a radius of sampling sites — get_population_radius","text":"","code":"get_population_radius(lon, lat, radius, path_pop_raster, path_output)"},{"path":"https://gilesjohnr.github.io/es/reference/get_population_radius.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get population counts within a radius of sampling sites — get_population_radius","text":"lon numeric vector giving longitudes sampling sites Decimal Degrees. lat numeric vector giving latitudes sampling sites Decimal Degrees. radius Numeric giving radius (meters) around point calculate total population path_pop_raster file path raster object providing population counts grid cell. See download_worldpop_data methods download population raster data. path_output file path output directory spatial data saved.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_population_radius.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get population counts within a radius of sampling sites — get_population_radius","text":"data.frame containing total population counts given radius around sampling site.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_population_radius.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get population counts within a radius of sampling sites — get_population_radius","text":"","code":"if (FALSE) {  dir.create(file.path(getwd(), 'tmp'))  download_worldpop_data(iso3 = 'BGD',                        year = 2020,                        constrained = FALSE,                        UN_adjusted = FALSE,                        path_output = file.path(getwd(), 'tmp'))  get_population_radius(lon = template_es_data$lon,                       lat = template_es_data$lat,                       radius = 100,                       path_pop_raster = file.path(getwd(), 'tmp/bgd_ppp_2020.tif'),                       path_output = file.path(getwd(), 'tmp'))  }"},{"path":"https://gilesjohnr.github.io/es/reference/get_precip_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get precipitation data — get_precip_data","title":"Get precipitation data — get_precip_data","text":"function takes information set environmental samples collected retrieves precipitation data (millimeters) locations times. Data come Open-Meteo Historical Weather API (https://open-meteo.com/en/docs/historical-weather-api) via openmeteo R package. Additionally, optional intervals argument specifies set intervals function calculate cumulative sum precipitation millimeters (mm) previous X number days location.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_precip_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get precipitation data — get_precip_data","text":"","code":"get_precip_data(lon, lat, dates, intervals = NULL)"},{"path":"https://gilesjohnr.github.io/es/reference/get_precip_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get precipitation data — get_precip_data","text":"lon numeric vector giving longitude sampling sites Decimal Degrees. lat numeric vector giving latitude sampling sites Decimal Degrees. dates character date vector dates giving date sample collected (format YYYY-MM-DD) intervals integer vector giving set time intervals sum precipitation data. Default NULL interval 0 (returns precipitation value time t). intervals=3 cumulative precipitation preceding 3 days returned.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_precip_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get precipitation data — get_precip_data","text":"data.frame","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_precip_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get precipitation data — get_precip_data","text":"","code":"if (FALSE) {  d <- get_precip_data(lon = c(-56.0281, -54.9857),                      lat = c(-2.9094, -2.8756),                      dates = c(\"2017-12-01\", \"2017-12-31\"),                      intervals = c(1,3,7))  head(d)  ggplot2::ggplot(d, aes(x = date)) +      geom_line(aes(y = precip_daily_sum_7, col='Cumulative sum 7 days')) +      geom_line(aes(y = precip_daily_sum_3, col='Cumulative sum 3 days')) +      geom_line(aes(y = precip_daily_sum_1, col='Cumulative sum 1 day')) +      geom_line(aes(y = precip_daily_sum)) +      facet_grid(rows=vars(id)) +      labs(x=\"\", y = \"Precipitation (mm)\") +      theme_bw() +      theme(legend.position = 'bottom',            legend.title = element_blank())  }"},{"path":"https://gilesjohnr.github.io/es/reference/get_river_discharge_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get river discharge data — get_river_discharge_data","title":"Get river discharge data — get_river_discharge_data","text":"function takes information set environmental samples collected retrieves daily river discharge data nearest river (\\(m^3/s\\)) locations times. Data come Open-Meteo Global Flood API (https://open-meteo.com/en/docs/flood-api) via openmeteo R package.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_river_discharge_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get river discharge data — get_river_discharge_data","text":"","code":"get_river_discharge_data(lon, lat, dates)"},{"path":"https://gilesjohnr.github.io/es/reference/get_river_discharge_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get river discharge data — get_river_discharge_data","text":"lon numeric vector giving longitude sampling sites Decimal Degrees. lat numeric vector giving latitude sampling sites Decimal Degrees. dates character date vector dates giving date sample collected (format YYYY-MM-DD)","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_river_discharge_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get river discharge data — get_river_discharge_data","text":"data.frame","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_river_discharge_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get river discharge data — get_river_discharge_data","text":"","code":"if (FALSE) {  d <- get_river_discharge_data(lon = c(-54.9857, -52.9857),                               lat = c(-10.9094, -25.8756),                               dates = c(\"2020-06-01\", \"2020-10-31\"))  head(d)  ggplot2::ggplot(d, aes(x = date)) +      geom_line(aes(y = daily_river_discharge)) +      facet_grid(rows=vars(id)) +      labs(x=\"\", y = \"Local River Discharge (m^3/s)\") +      theme_bw() +      theme(legend.position = 'bottom',            legend.title = element_blank())  }"},{"path":"https://gilesjohnr.github.io/es/reference/get_temp_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get temperature data — get_temp_data","title":"Get temperature data — get_temp_data","text":"function takes information set environmental samples collected retrieves temperature data (measured accumulated degree-days) locations times. Data come Open-Meteo Historical Weather API (https://open-meteo.com/en/docs/historical-weather-api) via openmeteo R package. optional intervals argument specifies set intervals function calculate accumulated temperature form Accumulated Thermal Units (ATUs) interval.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_temp_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get temperature data — get_temp_data","text":"","code":"get_temp_data(lon, lat, dates, intervals = NULL)"},{"path":"https://gilesjohnr.github.io/es/reference/get_temp_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get temperature data — get_temp_data","text":"lon numeric vector giving longitude sampling sites Decimal Degrees. lat numeric vector giving latitude sampling sites Decimal Degrees. dates character date vector dates giving date sample collected (format YYYY-MM-DD) intervals integer vector giving set time intervals calculate accumulated degree-days. Default NULL interval 0 (returns daily temperature degrees Celsius time t). intervals=3 accumulated degree-days preceding 3 days returned.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_temp_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get temperature data — get_temp_data","text":"data.frame","code":""},{"path":"https://gilesjohnr.github.io/es/reference/get_temp_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get temperature data — get_temp_data","text":"","code":"if (FALSE) {  d <- get_temp_data(lon = c(30.0281, -52.9857), lat = c(15.9094, -25.8756), dates = c(\"2020-08-01\", \"2020-12-31\"), intervals = c(1,5,10))  head(d)  ggplot2::ggplot(d, aes(x = date)) +      geom_line(aes(y = temp_daily_atu_10, col='Accumulated temperature 10 days')) +      geom_line(aes(y = temp_daily_atu_5, col='Accumulated temperature 5 days')) +      geom_line(aes(y = temp_daily_atu_1, col='Accumulated temperature 1 day')) +      geom_line(aes(y = temp_daily_atu)) +      facet_grid(rows=vars(id)) +      labs(x=\"\", y = \"Accumulated Thermal Units (ATUs)\") +      theme_bw() +      theme(legend.position = 'bottom',            legend.title = element_blank())  }"},{"path":"https://gilesjohnr.github.io/es/reference/logmean.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the mean in log space — logmean","title":"Calculate the mean in log space — logmean","text":"function gives mean taken log-scale set numeric values. Values less equal zero ignored NA. Best suited values taken highly skewed distribution, Ct values often .","code":""},{"path":"https://gilesjohnr.github.io/es/reference/logmean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the mean in log space — logmean","text":"","code":"logmean(x)"},{"path":"https://gilesjohnr.github.io/es/reference/logmean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the mean in log space — logmean","text":"x vector containing numeric values","code":""},{"path":"https://gilesjohnr.github.io/es/reference/logmean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the mean in log space — logmean","text":"Scalar","code":""},{"path":"https://gilesjohnr.github.io/es/reference/logmean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the mean in log space — logmean","text":"","code":"if (FALSE) {  logmean(c(24.3, 10.3, 40, NA, 0, -1, 0.05))  }"},{"path":"https://gilesjohnr.github.io/es/reference/template_es_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Template environmental sampling data — template_es_data","title":"Template environmental sampling data — template_es_data","text":"template_es_data object provides template data format required es package.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/template_es_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Template environmental sampling data — template_es_data","text":"","code":"template_es_data"},{"path":[]},{"path":"https://gilesjohnr.github.io/es/reference/template_es_data.html","id":"template-es-data","dir":"Reference","previous_headings":"","what":"template_es_data","title":"Template environmental sampling data — template_es_data","text":"data frame 6 columns: date date sample collected. Formate \"YYYY-MM-DD\". location_id unique identifier sampling locations. lat lattitude sampling location decimal degrees. lon longitude sampling location decimal degrees. target_name unique name gene target Ct values correspond. ct_value Cycle Threshold (Ct) qPCR assay.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/template_standard_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Template standard curve data — template_standard_curve","title":"Template standard curve data — template_standard_curve","text":"template_standard_curve object provides template data format required es package standard curve values. data required calculating number gene copies using calc_n_copies function.","code":""},{"path":"https://gilesjohnr.github.io/es/reference/template_standard_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Template standard curve data — template_standard_curve","text":"","code":"template_standard_curve"},{"path":[]},{"path":"https://gilesjohnr.github.io/es/reference/template_standard_curve.html","id":"template-standard-curve","dir":"Reference","previous_headings":"","what":"template_standard_curve","title":"Template standard curve data — template_standard_curve","text":"data frame 3 columns: target_name unique name gene target Ct values correspond. n_copies number gene copies represented particular dilution. ct_value Cycle Threshold (Ct) qPCR assay.","code":""},{"path":"https://gilesjohnr.github.io/es/news/index.html","id":"es-v100","dir":"Changelog","previous_headings":"","what":"es v1.0.0","title":"es v1.0.0","text":"Welcome first release es R package! Version 1.0.0 contains collection basic features aim make analyzing environmental sampling data easier reproducible. functionality included kick package includes: Detailed descriptions standard data formats environmental sampling data standard curve assays. functionality package requires data follow formats. Calculating number gene copies using Ct values standard curve assay Calculating ΔΔCt method fold-change gene expression relative reference gene. efficiency-weighted version also included. Estimation percentile amplification efficiency using standard curve assay. Data Open-Meteo Historical Weather API cumulative precipitation accumulated thermal units Evaporative Stress Index (ESI) Data Amazon Web Services (AWS) API elevation slope aspect flow accumulation stream networks drainage catchments Data WorldPop Population counts drainage catchments Population counts within radius Data geoBoundaries Place names sampling sites Basic calculation sample sizes detection rates","code":""}]
